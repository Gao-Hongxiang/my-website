"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=o,f=m["".concat(p,".").concat(d)]||m[d]||s[d]||l;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var u=2;u<l;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>s,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const l={title:"9. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",last_update:{date:"12/29/2022",author:"\u9ad8\u7ea2\u7fd4"}},a=void 0,i={unversionedId:"\u4e8c\u53c9\u6811/minDepth",id:"\u4e8c\u53c9\u6811/minDepth",title:"9. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",description:"\u9898\u76ee",source:"@site/leetcode/04-\u4e8c\u53c9\u6811/09-minDepth.md",sourceDirName:"04-\u4e8c\u53c9\u6811",slug:"/\u4e8c\u53c9\u6811/minDepth",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/minDepth",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{title:"9. \u4e8c\u53c9\u6811\u7684\u6700\u5c0f\u6df1\u5ea6",last_update:{date:"12/29/2022",author:"\u9ad8\u7ea2\u7fd4"}},sidebar:"tutorialSidebar",previous:{title:"8. \u4e8c\u53c9\u6811\u7684\u6700\u5927\u6df1\u5ea6",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/maxDepth"},next:{title:"10. \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/countNodes"}},p={},u=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u7b54\u6848",id:"\u7b54\u6848",level:2},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:3}],c={toc:u};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002"),(0,o.kt)("p",null,"\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u8bf4\u660e\uff1a"),"\u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1a2\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [2,null,3,null,4,null,5,null,6]\n\u8f93\u51fa\uff1a5\n")),(0,o.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09"),(0,o.kt)("p",null,"\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/minimum-depth-of-binary-tree/"},"https://leetcode.cn/problems/minimum-depth-of-binary-tree/")),(0,o.kt)("h2",{id:"\u7b54\u6848"},"\u7b54\u6848"),(0,o.kt)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) return 0\n  // \u5230\u53f6\u5b50\u8282\u70b9 \u8fd4\u56de 1\n  if (!root.left && !root.right) return 1\n  // \u53ea\u6709\u53f3\u8282\u70b9\u65f6 \u9012\u5f52\u53f3\u8282\u70b9\n  if (!root.left) return 1 + minDepth(root.right)\n  // \u53ea\u6709\u5de6\u8282\u70b9\u65f6 \u9012\u5f52\u5de6\u8282\u70b9\n  if (!root.right) return 1 + minDepth(root.left)\n  return Math.min(minDepth(root.left), minDepth(root.right)) + 1\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {TreeNode} root\n * @return {number}\n */\nvar minDepth = function (root) {\n  if (!root) return 0\n  const queue = [root]\n  let dep = 0\n  while (true) {\n    let size = queue.length\n    dep++\n    while (size--) {\n      const node = queue.shift()\n      // \u5230\u7b2c\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9 \u8fd4\u56de \u5f53\u524d\u6df1\u5ea6\n      if (!node.left && !node.right) return dep\n      node.left && queue.push(node.left)\n      node.right && queue.push(node.right)\n    }\n  }\n}\n")))}s.isMDXComponent=!0}}]);