"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3342],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,h=d["".concat(p,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(h,l(l({ref:t},s),{},{components:n})):r.createElement(h,l({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6363:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"12.\u76f8\u4ea4\u94fe\u8868 -160",description:"\u94fe\u8868",last_update:{date:"02/03/2023",author:"\u9ad8\u7ea2\u7fd4"}},l=void 0,i={unversionedId:"\u94fe\u8868/getIntersectionNode",id:"\u94fe\u8868/getIntersectionNode",title:"12.\u76f8\u4ea4\u94fe\u8868 -160",description:"\u94fe\u8868",source:"@site/leetcode/03-\u94fe\u8868/12-getIntersectionNode.md",sourceDirName:"03-\u94fe\u8868",slug:"/\u94fe\u8868/getIntersectionNode",permalink:"/website/leetcode/\u94fe\u8868/getIntersectionNode",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{title:"12.\u76f8\u4ea4\u94fe\u8868 -160",description:"\u94fe\u8868",last_update:{date:"02/03/2023",author:"\u9ad8\u7ea2\u7fd4"}},sidebar:"tutorialSidebar",previous:{title:"11.   \u5b9a\u4f4d\u73af\u7684\u8d77\u70b9 -141",permalink:"/website/leetcode/\u94fe\u8868/detectCycle"},next:{title:"\u516d\u3001\u4e8c\u5206\u67e5\u627e",permalink:"/website/leetcode/category/\u516d\u4e8c\u5206\u67e5\u627e"}},p={},c=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u89e3\u7b54",id:"\u89e3\u7b54",level:2},{value:"\u54c8\u5e0c\u8868",id:"\u54c8\u5e0c\u8868",level:3},{value:"\u53cc\u6307\u9488",id:"\u53cc\u6307\u9488",level:3}],s={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9 headA \u548c headB \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de null \u3002"),(0,a.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09"),(0,a.kt)("p",null,"\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/intersection-of-two-linked-lists/"},"https://leetcode.cn/problems/intersection-of-two-linked-lists/")),(0,a.kt)("h2",{id:"\u89e3\u7b54"},"\u89e3\u7b54"),(0,a.kt)("h3",{id:"\u54c8\u5e0c\u8868"},"\u54c8\u5e0c\u8868"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var getIntersectionNode = function (headA, headB) {\n  if (!headA || !headB) return null\n  const hashmap = new Map()\n\n  let pA = headA\n  while (pA) {\n    hashmap.set(pA, 1)\n    pA = pA.next\n  }\n\n  let pB = headB\n  while (pB) {\n    if (hashmap.has(pB)) return pB\n    pB = pB.next\n  }\n  return null\n}\n")),(0,a.kt)("h3",{id:"\u53cc\u6307\u9488"},"\u53cc\u6307\u9488"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var getIntersectionNode = function (headA, headB) {\n  if (!headA || !headB) return null\n\n  let pA = headA,\n    pB = headB\n  while (pA !== pB) {\n    pA = pA === null ? headB : pA.next\n    pB = pB === null ? headA : pB.next\n  }\n  return pA\n}\n")))}u.isMDXComponent=!0}}]);