"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5940],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},s=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),m=i(r),d=a,f=m["".concat(p,".").concat(d)]||m[d]||c[d]||o;return r?n.createElement(f,l(l({ref:t},s),{},{components:r})):n.createElement(f,l({ref:t},s))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var u={};for(var p in t)hasOwnProperty.call(t,p)&&(u[p]=t[p]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var i=2;i<o;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4452:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const o={title:"15. \u8def\u5f84\u603b\u548c",last_update:{date:"01/03/2023",author:"zhongnan"}},l=void 0,u={unversionedId:"\u4e8c\u53c9\u6811/pathSum",id:"\u4e8c\u53c9\u6811/pathSum",title:"15. \u8def\u5f84\u603b\u548c",description:"\u9898\u76ee",source:"@site/leetcode/04-\u4e8c\u53c9\u6811/15-pathSum.md",sourceDirName:"04-\u4e8c\u53c9\u6811",slug:"/\u4e8c\u53c9\u6811/pathSum",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/pathSum",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"15. \u8def\u5f84\u603b\u548c",last_update:{date:"01/03/2023",author:"zhongnan"}},sidebar:"tutorialSidebar",previous:{title:"14. \u627e\u6811\u5de6\u4e0b\u89d2\u7684\u503c",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/findBottomLeftValue"},next:{title:"16. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/midleBehindTree"}},p={},i=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u7b54\u6848",id:"\u7b54\u6848",level:2},{value:"\u8fed\u4ee3\u6cd5",id:"\u8fed\u4ee3\u6cd5",level:3},{value:"\u9012\u5f52\u6cd5",id:"\u9012\u5f52\u6cd5",level:3}],s={toc:i};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u7ed9\u4f60\u4e8c\u53c9\u6811\u7684\u6839\u8282\u70b9 ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," \u548c\u4e00\u4e2a\u8868\u793a\u76ee\u6807\u548c\u7684\u6574\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"targetSum")," \u3002\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728 ",(0,a.kt)("strong",{parentName:"p"},"\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9")," \u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c ",(0,a.kt)("inlineCode",{parentName:"p"},"targetSum")," \u3002\u5982\u679c\u5b58\u5728\uff0c\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," \uff1b\u5426\u5219\uff0c\u8fd4\u56de ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," \u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u53f6\u5b50\u8282\u70b9 \u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n\u8f93\u51fa: true\n\u89e3\u91ca: \u7b49\u4e8e\u76ee\u6807\u548c\u7684\u6839\u8282\u70b9\u5230\u53f6\u8282\u70b9\u8def\u5f84\u5982\u4e0a\u56fe\u6240\u793a\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165: root = [1,2,3], targetSum = 5\n\u8f93\u51fa: false\n")),(0,a.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09"),(0,a.kt)("p",null,"\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/path-sum/"},"https://leetcode.cn/problems/path-sum/")),(0,a.kt)("h2",{id:"\u7b54\u6848"},"\u7b54\u6848"),(0,a.kt)("h3",{id:"\u8fed\u4ee3\u6cd5"},"\u8fed\u4ee3\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {treenode} root\n * @param {number} targetsum\n * @return {boolean}\n */\nlet hasPathSum = function(root, targetSum) {\n    if(root === null) return false;\n    let nodeArr = [root];\n    let valArr = [0];\n    while(nodeArr.length) {\n        let curNode = nodeArr.shift();\n        let curVal = valArr.shift();\n        curVal += curNode.val;\n        // \u4e3a\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e14\u548c\u7b49\u4e8e\u76ee\u6807\u6570\uff0c\u8fd4\u56detrue\n        if (curNode.left === null && curNode.right === null && curVal === targetSum) {\n            return true;\n        }\n        // \u5de6\u8282\u70b9\uff0c\u5c06\u5f53\u524d\u7684\u6570\u503c\u4e5f\u5bf9\u5e94\u8bb0\u5f55\u4e0b\u6765\n        if (curNode.left) {\n            nodeArr.push(curNode.left);\n            valArr.push(curVal);\n        }\n        // \u53f3\u8282\u70b9\uff0c\u5c06\u5f53\u524d\u7684\u6570\u503c\u4e5f\u5bf9\u5e94\u8bb0\u5f55\u4e0b\u6765\n        if (curNode.right) {\n            nodeArr.push(curNode.right);\n            valArr.push(curVal);\n        }\n    }\n    return false;\n};\n")),(0,a.kt)("h3",{id:"\u9012\u5f52\u6cd5"},"\u9012\u5f52\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {treenode} root\n * @param {number} targetsum\n * @return {boolean}\n */\nlet haspathsum = function (root, targetsum) {\n  // \u9012\u5f52\u6cd5\n  const traversal = (node, cnt) => {\n    // \u9047\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u5e76\u4e14\u8ba1\u6570\u4e3a0\n    if (cnt === 0 && !node.left && !node.right) return true;\n    // \u9047\u5230\u53f6\u5b50\u8282\u70b9\u800c\u6ca1\u6709\u627e\u5230\u5408\u9002\u7684\u8fb9(\u8ba1\u6570\u4e0d\u4e3a0)\uff0c\u76f4\u63a5\u8fd4\u56de\n    if (!node.left && !node.right) return false;\n\n    //  \u5de6\uff08\u7a7a\u8282\u70b9\u4e0d\u904d\u5386\uff09.\u9047\u5230\u53f6\u5b50\u8282\u70b9\u8fd4\u56detrue\uff0c\u5219\u76f4\u63a5\u8fd4\u56detrue\n    if (node.left && traversal(node.left, cnt - node.left.val)) return true;\n    //  \u53f3\uff08\u7a7a\u8282\u70b9\u4e0d\u904d\u5386\uff09  \n    if (node.right && traversal(node.right, cnt - node.right.val)) return true;\n    return false;\n  };\n  if (!root) return false;\n  return traversal(root, targetsum - root.val);\n\n  // \u7cbe\u7b80\u4ee3\u7801:\n  // if (!root) return false;\n  // if (!root.left && !root.right && targetsum === root.val) return true;\n  // return haspathsum(root.left, targetsum - root.val) || haspathsum(root.right, targetsum - root.val);\n};\n")))}c.isMDXComponent=!0}}]);