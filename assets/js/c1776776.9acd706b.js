"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[285],{3905:(e,r,t)=>{t.d(r,{Zo:()=>s,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),d=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},s=function(e){var r=d(e.components);return n.createElement(i.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=d(t),m=o,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||a;return t?n.createElement(f,l(l({ref:r},s),{},{components:t})):n.createElement(f,l({ref:r},s))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=u;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p.mdxType="string"==typeof e?e:o,l[1]=p;for(var d=2;d<a;d++)l[d]=t[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4213:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>p,toc:()=>d});var n=t(7462),o=(t(7294),t(3905));const a={title:"16. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",last_update:{date:"01/03/2023",author:"zhongnan"}},l=void 0,p={unversionedId:"\u4e8c\u53c9\u6811/midleBehindTree",id:"\u4e8c\u53c9\u6811/midleBehindTree",title:"16. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",description:"\u9898\u76ee",source:"@site/leetcode/04-\u4e8c\u53c9\u6811/16-midleBehindTree.md",sourceDirName:"04-\u4e8c\u53c9\u6811",slug:"/\u4e8c\u53c9\u6811/midleBehindTree",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/midleBehindTree",draft:!1,tags:[],version:"current",sidebarPosition:16,frontMatter:{title:"16. \u4ece\u4e2d\u5e8f\u4e0e\u540e\u5e8f\u904d\u5386\u5e8f\u5217\u6784\u9020\u4e8c\u53c9\u6811",last_update:{date:"01/03/2023",author:"zhongnan"}},sidebar:"tutorialSidebar",previous:{title:"15. \u8def\u5f84\u603b\u548c",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/pathSum"},next:{title:"17. \u5220\u9664\u4e8c\u53c9\u641c\u7d22\u6811\u4e2d\u7684\u8282\u70b9",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/deleteNode"}},i={},d=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u7b54\u6848",id:"\u7b54\u6848",level:2},{value:"\u8fed\u4ee3\u6cd5",id:"\u8fed\u4ee3\u6cd5",level:3},{value:"\u9012\u5f52\u6cd5",id:"\u9012\u5f52\u6cd5",level:3}],s={toc:d};function c(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,o.kt)("p",null,"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\u6570\u7ec4 ",(0,o.kt)("inlineCode",{parentName:"p"},"inorder")," \u548c ",(0,o.kt)("inlineCode",{parentName:"p"},"postorder")," \uff0c\u5176\u4e2d ",(0,o.kt)("inlineCode",{parentName:"p"},"inorder")," \u662f\u4e8c\u53c9\u6811\u7684\u4e2d\u5e8f\u904d\u5386\uff0c ",(0,o.kt)("inlineCode",{parentName:"p"},"postorder")," \u662f\u540c\u4e00\u68f5\u6811\u7684\u540e\u5e8f\u904d\u5386\uff0c\u8bf7\u4f60\u6784\u9020\u5e76\u8fd4\u56de\u8fd9\u9897 ",(0,o.kt)("strong",{parentName:"p"},"\u4e8c\u53c9\u6811")," \u3002"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2021/02/19/tree.jpg",alt:"img"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n\u8f93\u51fa: [3,9,20,null,null,15,7]\n\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"\u8f93\u5165: inorder = [-1], postorder = [-1]\n\u8f93\u51fa: [-1]\n")),(0,o.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09"),(0,o.kt)("p",null,"\u94fe\u63a5\uff1a",(0,o.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/"},"https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/")),(0,o.kt)("h2",{id:"\u7b54\u6848"},"\u7b54\u6848"),(0,o.kt)("h3",{id:"\u8fed\u4ee3\u6cd5"},"\u8fed\u4ee3\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} inorder\n * @param {number[]} postorder\n * @return {TreeNode}\n */\nvar buildTree = function(inorder, postorder) {\n    if (postorder.length === 0) {\n        return null;\n    }\n    const n = inorder.length;\n    let postIndex = n-1;\n    const rootVal = postorder[postIndex];\n    const root = new TreeNode(rootVal);\n    const stack = [];\n    let inorderIndex = n-1;\n    stack.push(root);\n    for (postIndex--; postIndex >= 0; postIndex--) {\n        let peek = stack[stack.length-1]\n        const cur = new TreeNode(postorder[postIndex]);\n        if (peek.val !== inorder[inorderIndex]) {\n            peek.right = cur;\n        } else {\n            let fatherNode;\n            while (stack.length && stack[stack.length-1].val === inorder[inorderIndex]) {\n                fatherNode = stack.pop();\n                inorderIndex--;\n            }\n            fatherNode.left = cur;\n        }\n        stack.push(cur);\n    }\n    return root;\n};\n\n")),(0,o.kt)("h3",{id:"\u9012\u5f52\u6cd5"},"\u9012\u5f52\u6cd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {number[]} inorder\n * @param {number[]} postorder\n * @return {TreeNode}\n */\nvar buildTree = function(inorder, postorder) {\n    if (!postorder.length) return null;  //\u540e\u7eed\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a\u4e2d\u5fc3\u8282\u70b9\uff08\u6839\u8282\u70b9\uff09\n    const top = postorder.pop();//\u53d6\u4e2d\u5fc3\u8282\u70b9\uff08\u6839\u8282\u70b9\uff09\n    const root = new TreeNode(top); //\u521b\u5efa\u4e00\u4e2a\u65b0\u6811\n    const topIndex = inorder.indexOf(top);//\u5207\u5272\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\n    // \u9012\u5f52\u5de6\u533a\u95f4\u548c\u53f3\u533a\u95f4\n    root.left = buildTree(inorder.slice(0, topIndex), postorder.slice(0, topIndex));\n    root.right = buildTree(inorder.slice(topIndex + 1), postorder.slice(topIndex));\n    return root;\n};\n")))}c.isMDXComponent=!0}}]);