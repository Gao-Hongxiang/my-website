"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[929],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},i=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,h=d["".concat(c,".").concat(f)]||d[f]||u[f]||l;return n?r.createElement(h,o(o({ref:t},i),{},{components:n})):r.createElement(h,o({ref:t},i))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var s=2;s<l;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const l={title:"11. \u5e73\u8861\u4e8c\u53c9\u6811",last_update:{date:"12/29/2022",author:"zhongnan"}},o=void 0,p={unversionedId:"\u4e8c\u53c9\u6811/balanceTree",id:"\u4e8c\u53c9\u6811/balanceTree",title:"11. \u5e73\u8861\u4e8c\u53c9\u6811",description:"\u9898\u76ee",source:"@site/leetcode/04-\u4e8c\u53c9\u6811/11-balanceTree.md",sourceDirName:"04-\u4e8c\u53c9\u6811",slug:"/\u4e8c\u53c9\u6811/balanceTree",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/balanceTree",draft:!1,tags:[],version:"current",sidebarPosition:11,frontMatter:{title:"11. \u5e73\u8861\u4e8c\u53c9\u6811",last_update:{date:"12/29/2022",author:"zhongnan"}},sidebar:"tutorialSidebar",previous:{title:"10. \u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u8282\u70b9\u4e2a\u6570",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/countNodes"},next:{title:"12. \u4e8c\u53c9\u6811\u7684\u6240\u6709\u8def\u5f84",permalink:"/website/leetcode/\u4e8c\u53c9\u6811/allPath"}},c={},s=[{value:"\u9898\u76ee",id:"\u9898\u76ee",level:2},{value:"\u7b54\u6848",id:"\u7b54\u6848",level:2},{value:"\u9012\u5f52\u6cd5",id:"\u9012\u5f52\u6cd5",level:3},{value:"\u8fed\u4ee3\u6cd5",id:"\u8fed\u4ee3\u6cd5",level:3}],i={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u9898\u76ee"},"\u9898\u76ee"),(0,a.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a",(0,a.kt)("strong",{parentName:"p"},"\u4e8c\u53c9\u6811"),"\uff0c\u5224\u65ad\u5b83\u662f\u5426\u662f\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u6811."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5e73\u8861\u4e8c\u53c9\u6811"),"\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 1\uff1a")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [3,9,20,null,null,15,7]\n\u8f93\u51fa\uff1atrue\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u793a\u4f8b 2\uff1a")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg",alt:"img"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\u8f93\u5165\uff1aroot = [1,2,2,3,3,null,null,4,4]\n\u8f93\u51fa\uff1afalse\n")),(0,a.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09"),(0,a.kt)("p",null,"\u94fe\u63a5\uff1a",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/balanced-binary-tree/"},"https://leetcode.cn/problems/balanced-binary-tree/")),(0,a.kt)("h2",{id:"\u7b54\u6848"},"\u7b54\u6848"),(0,a.kt)("h3",{id:"\u9012\u5f52\u6cd5"},"\u9012\u5f52\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function (root) {\n  let flag = true\n  var maxDepth = (root) => {\n    if (!root) return 0\n    let leftMax = maxDepth(root.left)\n    let righttMax = maxDepth(root.right)\n    if (Math.abs(leftMax - righttMax) > 1) {\n      flag = false\n    }\n    return 1 + Math.max(leftMax, righttMax)\n  }\n  maxDepth(root)\n  return flag\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5229\u7528\u4e8c\u53c9\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u6765\u89e3\u9898\uff0c\u7f3a\u70b9\u662f\u5f53 flag \u4e3a false \u7684\u65f6\u5019\u6ca1\u6709\u53ca\u65f6\u8fd4\u56de\uff0c\u6700\u7ec8\u904d\u5386\u4e86\u6574\u68f5\u6811")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u4f18\u5316")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"var isBalanced = function (root) {\n  //\u8fd8\u662f\u7528\u9012\u5f52\u4e09\u90e8\u66f2 + \u540e\u5e8f\u904d\u5386 \u5de6\u53f3\u4e2d \u5f53\u524d\u5de6\u5b50\u6811\u53f3\u5b50\u6811\u9ad8\u5ea6\u76f8\u5dee\u5927\u4e8e1\u5c31\u8fd4\u56de-1\n  // 1. \u786e\u5b9a\u9012\u5f52\u51fd\u6570\u53c2\u6570\u4ee5\u53ca\u8fd4\u56de\u503c\n  const getDepth = function (node) {\n    // 2. \u786e\u5b9a\u9012\u5f52\u51fd\u6570\u7ec8\u6b62\u6761\u4ef6\n    if (node === null) return 0\n    // 3. \u786e\u5b9a\u5355\u5c42\u9012\u5f52\u903b\u8f91\n    let leftDepth = getDepth(node.left) //\u5de6\u5b50\u6811\u9ad8\u5ea6\n    // \u5f53\u5224\u5b9a\u5de6\u5b50\u6811\u4e0d\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\u65f6,\u5373\u53ef\u76f4\u63a5\u8fd4\u56de-1\n    if (leftDepth === -1) return -1\n    let rightDepth = getDepth(node.right) //\u53f3\u5b50\u6811\u9ad8\u5ea6\n    // \u5f53\u5224\u5b9a\u53f3\u5b50\u6811\u4e0d\u4e3a\u5e73\u8861\u4e8c\u53c9\u6811\u65f6,\u5373\u53ef\u76f4\u63a5\u8fd4\u56de-1\n    if (rightDepth === -1) return -1\n    if (Math.abs(leftDepth - rightDepth) > 1) {\n      return -1\n    } else {\n      return 1 + Math.max(leftDepth, rightDepth)\n    }\n  }\n  return !(getDepth(root) === -1)\n}\n")),(0,a.kt)("h3",{id:"\u8fed\u4ee3\u6cd5"},"\u8fed\u4ee3\u6cd5"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * @param {TreeNode} root\n * @return {boolean}\n */\nvar isBalanced = function (root) {\n  if (root === null) return true\n  const getHeight = (curNode) => {\n    if (curNode === null) return 0\n    const stack = []\n    stack.push(curNode)\n    let depth = 0,\n      res = 0\n\n    while (stack.length) {\n      let node = stack[stack.length - 1]\n\n      if (node !== null) {\n        stack.push(null)\n        depth++\n        node.right && stack.push(node.right)\n        node.left && stack.push(node.left)\n      } else {\n        stack.pop()\n        node = stack[stack.length - 1]\n        stack.pop()\n        depth--\n      }\n      res = Math.max(res, depth)\n    }\n    return res\n  }\n\n  const stack = []\n  stack.push(root)\n\n  while (stack.length) {\n    const node = stack.pop()\n    if (Math.abs(getHeight(node.left) - getHeight(node.right)) > 1) {\n      return false\n    }\n    node.right && stack.push(node.right)\n    node.left && stack.push(node.left)\n  }\n  return true\n}\n")))}u.isMDXComponent=!0}}]);