<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>webpack 打包后模块分析</title>
      <link href="/blog/2023/03/16/bundle/"/>
      <url>/blog/2023/03/16/bundle/</url>
      
        <content type="html"><![CDATA[<h2 id="1-同步加载"><a href="#1-同步加载" class="headerlink" title="1. 同步加载"></a>1. 同步加载</h2><h3 id="没有依赖"><a href="#没有依赖" class="headerlink" title="没有依赖"></a>没有依赖</h3><p>src\index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bundle.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//导出对象</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//模块内容</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打包模块分析"><a href="#打包模块分析" class="headerlink" title="打包模块分析"></a><strong>打包模块分析</strong></h3><p>src\index.js</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">let title &#x3D; require(&quot;.&#x2F;title.js&quot;);console.log(title);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src\title.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>bundle.js</p><blockquote><p>未加入缓存</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//模块定义</span><span class="token comment">//key是模块ID，也就是模块相对于相前根目录的相对路径</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">"title"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//加载模块，执行 modules 对应的函数</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-兼容性实现"><a href="#2-兼容性实现" class="headerlink" title="2. 兼容性实现"></a>2. 兼容性实现</h2><h3 id="2-1-common-js-加载-common-js"><a href="#2-1-common-js-加载-common-js" class="headerlink" title="2.1 common.js 加载 common.js"></a>2.1 common.js 加载 common.js</h3><h4 id="2-1-1-index-js"><a href="#2-1-1-index-js" class="headerlink" title="2.1.1 index.js"></a>2.1.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-title-js"><a href="#2-1-2-title-js" class="headerlink" title="2.1.2 title.js"></a>2.1.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span>exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-3-bundle-js"><a href="#2-1-3-bundle-js" class="headerlink" title="2.1.3 bundle.js"></a>2.1.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//需要加载的模块</span>  <span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      exports<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span>      exports<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"title_age"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//缓存</span>  <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">//require 方法</span>  <span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>    <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token comment">// 入口</span>  <span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-common-js-加载-ES6-modules"><a href="#2-2-common-js-加载-ES6-modules" class="headerlink" title="2.2 common.js 加载 ES6 modules"></a>2.2 common.js 加载 ES6 modules</h3><h4 id="2-2-1-index-js"><a href="#2-2-1-index-js" class="headerlink" title="2.2.1 index.js"></a>2.2.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./title"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-title-js"><a href="#2-2-2-title-js" class="headerlink" title="2.2.2 title.js"></a>2.2.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"title_name"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-3-bundle-js"><a href="#2-2-3-bundle-js" class="headerlink" title="2.2.3 bundle.js"></a>2.2.3 bundle.js</h4><blockquote><p>去除了自执行函数和模块缓存</p></blockquote><ul><li>打包前面是 commonjs 打包后不需要变，打包前是 esmodule 打包后得变</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token constant">DEFAULT_EXPORTS</span><span class="token punctuation">,</span> <span class="token comment">//值是一个getter</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">//默认导出</span>    <span class="token keyword">const</span> <span class="token constant">DEFAULT_EXPORTS</span> <span class="token operator">=</span> <span class="token string">"title_name"</span>    <span class="token comment">//命名导出</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//遍历key</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//在 definition 上不在 exports 上就赋值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 给exports 上面定义属性 geT 获取</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对象自身属性中是否具有指定的属性</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> title <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>default<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>title<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-ES6-modules-加载-ES6-modules"><a href="#2-3-ES6-modules-加载-ES6-modules" class="headerlink" title="2.3 ES6 modules 加载 ES6 modules"></a>2.3 ES6 modules 加载 ES6 modules</h3><h4 id="2-3-1-index-js"><a href="#2-3-1-index-js" class="headerlink" title="2.3.1 index.js"></a>2.3.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./title"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-title-js"><a href="#2-3-2-title-js" class="headerlink" title="2.3.2 title.js"></a>2.3.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token keyword">export</span> <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-3-3-bundle-js"><a href="#2-3-3-bundle-js" class="headerlink" title="2.3.3 bundle.js"></a>2.3.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 此处为了实现Livbinding做准备</span>    <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//标明是esModule模块</span>require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token comment">//加载对应的模块</span><span class="token keyword">var</span> _title_0__ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token comment">//取值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-ES6-modules-加载-common-js"><a href="#2-4-ES6-modules-加载-common-js" class="headerlink" title="2.4 ES6 modules 加载 common.js"></a>2.4 ES6 modules 加载 common.js</h3><h4 id="2-4-1-index-js"><a href="#2-4-1-index-js" class="headerlink" title="2.4.1 index.js"></a>2.4.1 index.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> name<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> age <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./title"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-4-2-title-js"><a href="#2-4-2-title-js" class="headerlink" title="2.4.2 title.js"></a>2.4.2 title.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"title_name"</span><span class="token punctuation">,</span>  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token string">"title_age"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-4-3-bundle-js"><a href="#2-4-3-bundle-js" class="headerlink" title="2.4.3 bundle.js"></a>2.4.3 bundle.js</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 如果原模块是esmodule * 先执行require.r * 再执行require.d */</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.声明或者说表示当前的模块原来是一个es module</span>    require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>    <span class="token comment">//2. 定义属性</span>    require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> age<span class="token punctuation">,</span>      <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 此处为了实现Livbinding做准备</span>    <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"title_name"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token string">"title_age"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 执行modules对象对应的模块函数 * @param &#123;*&#125; moduleId 模块Id * @returns module.exports */</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">/** * 给exports 上面定义属性 * @param &#123;*&#125; exports 导出对象 * @param &#123;*&#125; definition 定义的属性 */</span>require<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">/** * 给exports 声明 Symbol.toStringTag为Module ，__esModule 未true * @param &#123;*&#125; exports */</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//入口</span><span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//标明是esModule模块</span>require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span><span class="token comment">//加载对应的模块</span><span class="token keyword">var</span> _title_0__ <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token comment">//取值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">[</span><span class="token string">"default"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_title_0__<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-异步加载实现分析"><a href="#3-异步加载实现分析" class="headerlink" title="3. 异步加载实现分析"></a>3. 异步加载实现分析</h2><h3 id="打包前"><a href="#打包前" class="headerlink" title="打包前"></a>打包前</h3><p>index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./title.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./title.js"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>title.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token string">"title"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="打包后"><a href="#打包后" class="headerlink" title="打包后"></a>打包后</h3><p>main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//定义一个模块定义的对象</span><span class="token keyword">var</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//存放已经加载的模块的缓存</span><span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//在浏览器里实现require方法</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">moduleId</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> cachedModule <span class="token operator">=</span> cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedModule <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> cachedModule<span class="token punctuation">.</span>exports  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> module <span class="token operator">=</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">exports</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span><span class="token punctuation">(</span>module<span class="token punctuation">,</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span> require<span class="token punctuation">)</span>  <span class="token keyword">return</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">&#125;</span><span class="token comment">//给require方法定义一个m属性，指向模块定义对象</span>require<span class="token punctuation">.</span>m <span class="token operator">=</span> modulesrequire<span class="token punctuation">.</span><span class="token function-variable function">d</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports<span class="token punctuation">,</span> definition</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> definition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>definition<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">get</span><span class="token operator">:</span> definition<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">//空对象</span><span class="token comment">/** * * @param &#123;*&#125; chunkId  chunk 代码块 模块的集合 * @returns 返回Promise */</span>require<span class="token punctuation">.</span><span class="token function-variable function">e</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  require<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">j</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">,</span> promises<span class="token punctuation">)</span>  <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//源代码加载绝对路径 此处写成''</span>require<span class="token punctuation">.</span>p <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">//返回此代码块对应的文件名</span>require<span class="token punctuation">.</span><span class="token function-variable function">u</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token string">""</span> <span class="token operator">+</span> chunkId <span class="token operator">+</span> <span class="token string">".main.js"</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span>g <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> globalThis <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> globalThis  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">||</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"return this"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> window <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> window  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span class="token comment">// 通过JSONP加载代码 动态加载代码 原代码中会有一个定时器，成功后达到时间删除创建script标签</span>require<span class="token punctuation">.</span><span class="token function-variable function">l</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span>  script<span class="token punctuation">.</span>src <span class="token operator">=</span> url  document<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>require<span class="token punctuation">.</span><span class="token function-variable function">r</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">exports</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Symbol <span class="token operator">!==</span> <span class="token string">"undefined"</span> <span class="token operator">&amp;&amp;</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token string">"__esModule"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//存放加载的代码块的状态</span><span class="token comment">//key是代码块的名字</span><span class="token comment">//0表示已经加载完成了</span><span class="token keyword">var</span> installedChunks <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">main</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">//当一个代码块它的值是一个数组的时候表示此代码块对应的JS文件正在加载中</span>  <span class="token comment">//'src_hello_js':[resolve,reject,promise]=>0</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 通过JSONP异步加载一个chunkId对应的代码块文件，其实就是title.main.js * 会返回一个Promise * @param &#123;*&#125; chunkId 代码块ID * @param &#123;*&#125; promises promise数组 */</span>require<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function-variable function">j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">chunkId<span class="token punctuation">,</span> promises</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//做缓存  当前的代码块的数据</span>  <span class="token keyword">var</span> installedChunkData <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">o</span><span class="token punctuation">(</span>installedChunks<span class="token punctuation">,</span> chunkId<span class="token punctuation">)</span> <span class="token operator">?</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">undefined</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>installedChunkData <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      installedChunkData <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    installedChunkData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> promise    <span class="token comment">//installedChunkData=[resolve,reject,promise]</span>    promises<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> require<span class="token punctuation">.</span>p <span class="token operator">+</span> require<span class="token punctuation">.</span><span class="token function">u</span><span class="token punctuation">(</span>chunkId<span class="token punctuation">)</span>    require<span class="token punctuation">.</span><span class="token function">l</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * * @param &#123;*&#125; chunkIds 代码块ID数组 * @param &#123;*&#125; moreModules 额外的模块定义 */</span><span class="token keyword">function</span> <span class="token function">webpackJsonpCallback</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>chunkIds<span class="token punctuation">,</span> moreModules<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> resolves <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chunkIds<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> chunkId <span class="token operator">=</span> chunkIds<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">//src_title_js</span>    <span class="token keyword">const</span> resolve <span class="token operator">=</span> installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    resolves<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span>    <span class="token comment">//到这里此代码块就已经加载成功了，可以把chunkId的值设置为0</span>    installedChunks<span class="token punctuation">[</span>chunkId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//合并模块定义到modules去</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> moduleId <span class="token keyword">in</span> moreModules<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    modules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span> <span class="token operator">=</span> moreModules<span class="token punctuation">[</span>moduleId<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>resolves<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//取出所有的resolve方法，让它执行，让它对应的promise变成成功态</span>    resolves<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> chunkLoadingGlobal <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">[</span><span class="token string">"someName"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>chunkLoadingGlobal<span class="token punctuation">.</span>push <span class="token operator">=</span> webpackJsonpCallback<span class="token keyword">var</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * require.e异步加载title代码块文件 title.main.js * promise成功后会把 title.main.js里面的代码定义合并到require.m对象上，也就是modules上 * 调用require方法加载./src/title.js模块，获取 模块的导出对象，进行打印 */</span>require  <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"src_title_js"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>default<span class="token punctuation">)</span>    require      <span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"src_title_js"</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> <span class="token string">"./src/title.js"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>default<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>src_title_js.main.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">[</span><span class="token string">"someName"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token string">"src_title_js"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token string-property property">"./src/title.js"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">module<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> require</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      require<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span>exports<span class="token punctuation">)</span>      require<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>exports<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">default</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> _DEFAULT_EXPORT__<span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>      <span class="token keyword">const</span> _DEFAULT_EXPORT__ <span class="token operator">=</span> <span class="token string">"title"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h2><h3 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h3><ul><li><p>**modules 对象 ** key 是模块 ID，也就是模块相对于相前根目录的相对路径 值为对应加载模块的内容函数</p></li><li><p><strong>require 方法</strong> 执行 modules 对象对应的模块函数 返回 modules.exports 对象</p></li><li><p><strong>require.d 方法</strong> 通过 defineProperty 给 exports 上设置属性 get 获取</p></li><li><p><strong>require.o 方法</strong> 对象自身属性中是否具有指定的属性</p></li><li><p><strong>require.r 方法</strong> 标明该模块是 esModele 模块</p></li><li><p><strong>require.n 方法</strong> 返回函数兼容性处理默认值 ，esModule 模块 是的返回 module[“default”] 否则 commonjs 模块返回本身</p></li><li><p><strong>require.m 方法</strong> 指向模块定义对象 equire.m = modules;</p></li><li><p><strong>require.p 方法</strong> 获取要加载文件的绝对路径</p></li><li><p><strong>require.u 方法</strong> 返回此代码块对应的文件名</p></li><li><p><strong>require.l 方法</strong> 返回此代码块对应的文件名</p></li><li><p><strong>require.f.j 方法</strong></p></li><li><p><strong>require.e 方法</strong> 异步加载代码块文件</p><ul><li>返回 Promise.all([promises])</li><li>promise 成功后会把 加载里面的代码定义合并到 require.m 对象上，也就是 modules 上</li><li>调用 require 方法加载对应模块，获取 模块的导出对象，进行打印</li></ul><p><strong>installedChunks 对象</strong> //存放加载的代码块的状态 //key 是代码块的名字 //0 表示已经加载完成了</p></li></ul><h3 id="兼容处理"><a href="#兼容处理" class="headerlink" title="兼容处理"></a><strong>兼容处理</strong></h3><ul><li><strong>common.js 加载 common.js</strong><ol><li>直接调用 require 方法 执行 modules 对象对应的函数返回 modules.exports 对象</li></ol></li><li><strong>common.js 加载 ES6 modules</strong></li></ul><ol><li> 直接调用 require 方法</li><li>执行 modules 对象对应的函数<ol><li> 调用 require.r 方法 标明该模块为 esModule</li><li> 调用 require.d 方法 给 export 对象赋值</li></ol></li><li> 返回 modules.exports</li></ol><ul><li><p>ES6 modules 加载 ES6 modules</p><ol><li>模块入口 调用 require.r 标明是 esModule 模块</li><li>调用 require 方法 加载模块<ol><li>调用 require.r 标明被加载的模块是 esModule</li><li>调用 require.d 方法 给 export 对象赋值</li></ol></li><li>返回 加载的内容 modules.exports</li></ol></li><li><p>ES6 modules 加载 common.js</p><ol><li><p>模块入口 调用 require.r 标明是 esModule 模块、</p></li><li><p>调用 require 方法 加载模块 返回对应模块内容</p></li><li><p>兼容处理返回的默认值 调用 require.n</p></li></ol></li></ul><h3 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a><strong>异步加载</strong></h3><ul><li><p>调用 require.e 异步加载代码，参数要加载的模块 ID</p><ul><li>创建一个空的 promises 数组</li><li>调用 require.f.j(chunkId, promises）<ul><li>定义一个 promise 和并且将该 chunkId 对应 promise 的 resolve,reject 放进数组</li><li>在全局对象 installedChunks 存取 key：chunkId ，value 为定义的数组</li><li>将该 promise 添加到 promises 上</li><li>通过 require.p + require.u(chunkId) 获取要动态加载的 script 的 url 地址</li><li>调用 require.l 同过 JSONP（动态创建 script，成功后删除）异步加载对接的文件</li><li>调用<strong>webpackJsonpCallback</strong>加载成功的回调，参数为 chunkIds 和 moreModules 对象<ul><li>installedChunks 取出对应 chunkId 的 resolves 方法存起来</li><li>把 installedChunks 中 chunkId 的值设置为 0 （表明该模块加载成功了）</li><li>遍历 moreModules 合并模块定义到 modules 去</li><li>依次取出 resolve 方法并执行</li></ul></li></ul></li><li>返回 Promise.all(promises)</li></ul></li><li><p>成功之后通过 then 方法加载调用 require 方法加载模块内容并返回下一个 then</p></li><li><p>页面通过.then 方法拿到结果</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hasOwnProperty</title>
      <link href="/blog/2023/03/15/hasownproperty/"/>
      <url>/blog/2023/03/15/hasownproperty/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a>Object.prototype.hasOwnProperty()</h1><p><strong><code>hasOwnProperty()</code></strong> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const object1 &#x3D; &#123;&#125;;object1.property1 &#x3D; 42;console.log(object1.hasOwnProperty(&#39;property1&#39;));&#x2F;&#x2F; Expected output: trueconsole.log(object1.hasOwnProperty(&#39;toString&#39;));&#x2F;&#x2F; Expected output: falseconsole.log(object1.hasOwnProperty(&#39;hasOwnProperty&#39;));&#x2F;&#x2F; Expected output: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用案例 | 二次封装</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">require<span class="token punctuation">.</span><span class="token function-variable function">o</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> prop<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>defineProperty 和 toStringTag</title>
      <link href="/blog/2023/03/15/defineproperty/"/>
      <url>/blog/2023/03/15/defineproperty/</url>
      
        <content type="html"><![CDATA[<h3 id="1-toStringTag"><a href="#1-toStringTag" class="headerlink" title="1. toStringTag"></a>1. toStringTag</h3><ul><li><code>Symbol.toStringTag</code> 是一个内置 symbol，它通常作为对象的属性键使用，对应的属性值应该为字符串类型，这个字符串用来表示该对象的自定义类型标签</li><li>通常只有内置的 <code>Object.prototype.toString()</code> 方法会去读取这个标签并把它包含在自己的返回值里。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object String]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Array]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Number]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Boolean]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Undefined]"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "[object Null]"</span><span class="token keyword">let</span> myExports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>myExports<span class="token punctuation">,</span> Symbol<span class="token punctuation">.</span>toStringTag<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">"Module"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>myExports<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//[object Module]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-defineProperty"><a href="#2-defineProperty" class="headerlink" title="2. defineProperty"></a>2. defineProperty</h3><ul><li>defineProperty 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。<ul><li>obj 要在其上定义属性的对象。</li><li>prop 要定义或修改的属性的名称。</li><li>descriptor 将被定义或修改的属性描述符。</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> ageValue <span class="token operator">=</span> <span class="token number">10</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//writable: true, //是否可修改</span>  <span class="token comment">//value: 10, //writeable 和 set不能混用</span>  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> ageValue  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ageValue <span class="token operator">=</span> newValue  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可枚举</span>  <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//是否可配置可删除</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo</title>
      <link href="/blog/2023/03/15/000-hexo/"/>
      <url>/blog/2023/03/15/000-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>你可以执行下列命令来创建一篇新文章或者新的页面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token punctuation">[</span>layout<span class="token punctuation">]</span> <span class="token operator">&lt;</span>title<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 <code>_config.yml </code>中的 <code>default_layout </code>参数来指定默认布局。</p><h3 id="布局（Layout）"><a href="#布局（Layout）" class="headerlink" title="布局（Layout）"></a>布局（Layout）</h3><ul><li>Hexo 有三种默认布局：<code>post</code>、<code>page</code> 和 <code>draft</code>。</li><li>在创建这三种不同类型的文件时，它们将会被保存到不同的路径；</li><li>而您自定义的其他布局和 post 相同，都将储存到 <code>source/_posts</code> 文件夹。</li></ul><table><thead><tr><th><strong>布局</strong></th><th><strong>路径</strong></th></tr></thead><tbody><tr><td>post</td><td>source/_posts</td></tr><tr><td>page</td><td>source</td></tr><tr><td>draft</td><td>source/_drafts</td></tr></tbody></table><h3 id="文件名称"><a href="#文件名称" class="headerlink" title="文件名称"></a>文件名称</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。</p><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>:title</code></td><td align="left">标题（小写，空格将会被替换为短杠）</td></tr><tr><td align="left"><code>:year</code></td><td align="left">建立的年份，比如， <code>2015</code></td></tr><tr><td align="left"><code>:month</code></td><td align="left">建立的月份（有前导零），比如， <code>04</code></td></tr><tr><td align="left"><code>:i_month</code></td><td align="left">建立的月份（无前导零），比如， <code>4</code></td></tr><tr><td align="left"><code>:day</code></td><td align="left">建立的日期（有前导零），比如， <code>07</code></td></tr><tr><td align="left"><code>:i_day</code></td><td align="left">建立的日期（无前导零），比如， <code>7</code></td></tr></tbody></table><h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><p>刚刚提到了 Hexo 的一种特殊布局：<code>draft</code>，这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹，您可通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹，该命令的使用方式与 <code>new</code> 十分类似，您也可在命令中指定 <code>layout</code> 来指定布局。</p><pre class="line-numbers language-none"><code class="language-none">$ hexo publish [layout] &lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>草稿默认不会显示在页面中，您可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</p><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>hide</td><td><code>false</code></td><td>隐藏文章，如果<code>hide</code>值为<code>true</code>，则文章不会在首页显示</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><p><strong>tags:</strong></p><ul><li>HTML | CSS | javaScript | ES6 | git | npm | Node.js | webpack | Vue.js | React.js | 算法 | 设计模式 | 面试 | 微前端 | 工具</li></ul><p><strong>categories:</strong></p><ul><li><p>开发工具</p></li><li><p>前端基础</p></li><li><p>前端框架</p></li><li><p>工程化</p></li><li><p>架构</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>polyfill 实践</title>
      <link href="/blog/2023/03/10/014-polyfill/"/>
      <url>/blog/2023/03/10/014-polyfill/</url>
      
        <content type="html"><![CDATA[<h2 id="1-babel-polyfill"><a href="#1-babel-polyfill" class="headerlink" title="1. babel-polyfill"></a>1. babel-polyfill</h2><ul><li><p><code>Babel</code>默认只转换新的<code>Javascript</code>语法，而不转换新的 API，比如</p><ul><li><p>Iterator, Generator, Set, Maps, Proxy, Reflect,Symbol,Promise 等全局对象</p></li><li><p>在全局对象上的方法,比如说 ES6 在 Array 对象上新增了<code>Array.find</code>方法，Babel 就不会转码这个方法</p></li></ul></li><li><p>如果想让这个方法运行，必须使用 <code>babel-polyfill</code>来转换等</p></li><li><p>Babel 7.4 之后不再推荐使用@babel/polyfill</p></li><li><p>babel v7 推荐使用@babel/preset-env 代替以往的诸多 polyfill 方案</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save core<span class="token operator">-</span>js@<span class="token number">2</span>    core<span class="token operator">-</span>js@<span class="token number">3</span>  @babel<span class="token operator">/</span>polyfill<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-1、-useBuiltIns-false"><a href="#1-1、-useBuiltIns-false" class="headerlink" title="1.1、 useBuiltIns: false"></a>1.1、 useBuiltIns: false</h3><ul><li><p><code>babel-polyfill</code> 它是通过<strong>向全局对象和内置对象的<code>prototype</code>上添加方法来实现的</strong>。比如运行环境中不支持<code>Array.prototype.find</code>方法，引入<code>polyfill</code>, 我们就可以使用<code>ES6</code>方法来编写了，但是<strong>缺点就是会造成全局空间污染</strong></p></li><li><p><code>useBuiltIns: false</code> 此时不对 <code>polyfill</code> 做操作。如果引入 <code>@babel/polyfill</code>，则<strong>无视配置的浏览器兼容，引入所有的 <code>polyfill</code></strong></p></li><li><p><code>@babel/preset-env</code>默认只支持语法转化，需要开启<code>useBuiltIns</code>配置才能转化 API 和实例方法</p></li></ul><h3 id="1-2、useBuiltIns-“entry”"><a href="#1-2、useBuiltIns-“entry”" class="headerlink" title="1.2、useBuiltIns: “entry”"></a>1.2、useBuiltIns: “entry”</h3><ul><li>在项目入口引入一次（多次引入会报错）</li><li>“useBuiltIns”: “entry” 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill。需要在入口文件手动添加 <code>import &#39;@babel/polyfill&#39;</code>，会自动根据 browserslist 替换成浏览器不兼容的所有 polyfill</li><li>这里需要指定 core-js 的版本,<code>corejs</code>默认是 2,</li><li>如果配置 <code>corejs: 3</code>, 则<code>import &#39;@babel/polyfill&#39;</code> 需要改成 <code>import &#39;core-js/stable&#39;;import &#39;regenerator-runtime/runtime&#39;;</code></li><li><ul><li><code>corejs</code>默认是 2</li></ul></li></ul><h3 id="1-3、-“useBuiltIns”-“usage”"><a href="#1-3、-“useBuiltIns”-“usage”" class="headerlink" title="1.3、 “useBuiltIns”: “usage”"></a>1.3、 “useBuiltIns”: “usage”</h3><ul><li>“useBuiltIns”: “usage” <code>usage</code> 会根据配置的浏览器兼容，以及你代码中用到的 API 来进行 polyfill，实现了按需添加</li><li>当设置为 usage 时，polyfill 会自动按需添加，不再需要手工引入<code>@babel/polyfill</code></li></ul><h2 id="2-babel-runtime"><a href="#2-babel-runtime" class="headerlink" title="2. babel-runtime"></a>2. babel-runtime</h2><ul><li>Babel 为了解决全局空间污染的问题，提供了单独的包<a href="https://babeljs.io/docs/en/babel-runtime">babel-runtime</a>用以提供编译模块的工具函数</li><li>简单说 <code>babel-runtime</code> 更像是一种按需加载的实现，比如你哪里需要使用 <code>Promise</code>，只要在这个文件头部<code>import Promise from &#39;babel-runtime/core-js/promise&#39;</code>就行了</li></ul><h2 id="3-babel-plugin-transform-runtime"><a href="#3-babel-plugin-transform-runtime" class="headerlink" title="3. babel-plugin-transform-runtime"></a>3. babel-plugin-transform-runtime</h2><ul><li><p>@babel/plugin-transform-runtime 插件是为了解决</p><ul><li>多个文件重复引用 相同 helpers(帮助函数)=&gt;提取运行时</li><li>新 API 方法全局污染 -&gt; 局部引入</li></ul></li><li><p>启用插件<code>babel-plugin-transform-runtime</code>后，Babel 就会使用<code>babel-runtime</code>下的工具函数</p></li><li><p><code>babel-plugin-transform-runtime</code>插件能够将这些工具函数的代码转换成<code>require</code>语句，指向为对<code>babel-runtime</code>的引用</p></li><li><p><code> babel-plugin-transform-runtime</code>就是可以在我们使用新 API 时自动 import<br><code>babel-runtime</code>里面的<code>  polyfill</code></p><ul><li><p>当我们使用 <code>async/await</code> 时，自动引入 <code>babel-runtime/regenerator</code></p></li><li><p>当我们使用 ES6 的静态事件或内置对象时，自动引入 <code>babel-runtime/core-js</code></p></li><li><p>移除内联<code>babel helpers</code>并替换使用<code>babel-runtime/helpers</code> 来替换</p></li></ul></li></ul><p><strong>helpers: true</strong></p><ul><li><p>移除内联 babel helpers 并替换使用<code>babel-runtime/helpers</code> 来替换</p></li><li><p>避免内联的 helper 代码在多个文件重复出现</p><p><strong>regenerator: true</strong></p></li><li><p>是否开启<code>generator</code>函数转换成使用<code>regenerator runtime</code>来避免污染全局域</p></li></ul><h2 id="4-最佳实践"><a href="#4-最佳实践" class="headerlink" title="4. 最佳实践"></a>4. 最佳实践</h2><ul><li>@babel/preset-env 和 plugin-transform-runtime 二者都可以设置使用 corejs 来处理 polyfill</li></ul><h3 id="4-1-项目开发"><a href="#4-1-项目开发" class="headerlink" title="4.1 项目开发"></a>4.1 项目开发</h3><ul><li><p>useBuiltIns 使用 usage</p></li><li><p>plugin-transform-runtime 只使用其移除内联复用的辅助函数的特性，减小打包体积</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>          <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>              <span class="token property">"useBuiltIns"</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token punctuation">,</span><span class="token comment">//实现polyfill 项目中不用担心会污染全局作用域</span>              <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token number">3</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>          <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>          <span class="token punctuation">&#123;</span>              <span class="token property">"corejs"</span><span class="token operator">:</span> <span class="token boolean">false</span>，<span class="token comment">//不属于此插件提供的polyfill</span>               helpers<span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使用此插件,复用帮助 方法，减少文件体积</span>              regenerator<span class="token operator">:</span><span class="token boolean">false</span>          <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-2-类库开发"><a href="#4-2-类库开发" class="headerlink" title="4.2 类库开发"></a>4.2 类库开发</h3><ul><li>类库开发尽量不使用污染全局环境的<code>polyfill</code>，因此<code>@babel/preset-env</code>只发挥语法转换的功能</li><li>polyfill 由<code>@babel/plugin-transform-runtime</code>来处理，推荐使用 core-js@3</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token string-property property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>            <span class="token string">"@babel/preset-env"</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string-property property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span>             <span class="token string">"@babel/plugin-transform-runtime"</span><span class="token punctuation">,</span>                                    <span class="token punctuation">&#123;</span>                                        <span class="token literal-property property">corejs</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">//使用此插件提供的polyfill,此插件不会污染全局环境</span>                                        <span class="token literal-property property">helpers</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment">//使用此插件,复用帮助 方法，减少文件体积</span>                                        <span class="token literal-property property">regenerator</span><span class="token operator">:</span><span class="token boolean">false</span>                                    <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-polyfill-service"><a href="#5-polyfill-service" class="headerlink" title="5. polyfill-service"></a>5. polyfill-service</h2><ul><li><a href="https://polyfill.io/v3/">polyfill.io</a>自动化的 JavaScript Polyfill 服务</li><li><a href="https://polyfill.io/v3/">polyfill.io</a>通过分析请求头信息中的 UserAgent 实现自动加载浏览器所需的 polyfills</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"https://polyfill.io/v3/polyfill.min.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>babel-polyfill</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token operator">-</span> 在项目入口引入一次（多次引入会报错<span class="token punctuation">)</span><span class="token operator">-</span> 则无视配置的浏览器兼容，引入所有的 <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">polyfill</span><span class="token template-punctuation string">`</span></span><span class="token operator">-</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">babel-polyfill</span><span class="token template-punctuation string">`</span></span> 它是通过向全局对象和内置对象的<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">prototype</span><span class="token template-punctuation string">`</span></span>上添加方法来实现的<span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"entry"</span> <span class="token operator">+</span> corejs<span class="token operator">-</span> 在项目入口引入一次（多次引入会报错<span class="token operator">-</span> 根据配置的浏览器兼容，引入浏览器不兼容的 polyfill <span class="token literal-property property">useBuiltIns</span><span class="token operator">:</span> <span class="token string">"usage"</span><span class="token operator">-</span> 根据配置的浏览器兼容，以及你代码中用到的 <span class="token constant">API</span> 来进行 polyfill，实现了按需添加<span class="token operator">-</span> 无需手动引入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缺点 污染全局</li></ul><p><strong>babel-runtime</strong></p><ul><li>Babel 为了解决全局空间污染的问题，提供了单独的包<a href="https://babeljs.io/docs/en/babel-runtime">babel-runtime</a>用以提供编译模块的工具函数</li><li>缺点代码中每个头部都需要手动引入需要的模块</li></ul><p><strong>babel-plugin-transform-runtime</strong></p><ul><li>多个文件重复引用 相同 helpers(帮助函数)=&gt;提取运行时</li><li>新 API 方法全局污染 -&gt; 局部引入</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化的发展历程</title>
      <link href="/blog/2023/03/09/013-mo-kuai-hua/"/>
      <url>/blog/2023/03/09/013-mo-kuai-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="一、模块化"><a href="#一、模块化" class="headerlink" title="一、模块化"></a>一、模块化</h2><h3 id="1-1-什么是模块化"><a href="#1-1-什么是模块化" class="headerlink" title="1.1.什么是模块化"></a>1.1.什么是模块化</h3><ul><li>模块划就是按照一定的规则把代码封装成若干的相互依赖的文件并进行组合</li><li>每个模块内的数据都是私有的，只向外选择性的暴露一些方法和数据与外界进行数据通信</li></ul><h3 id="1-2-模块化的意义"><a href="#1-2-模块化的意义" class="headerlink" title="1.2.模块化的意义"></a>1.2.模块化的意义</h3><ul><li>有利于代码分享、解耦以及复用</li><li>团队并行开发</li><li>避免命名冲突</li><li>相互引用，按需加载</li></ul><h3 id="1-3-模块化的发展史"><a href="#1-3-模块化的发展史" class="headerlink" title="1.3. 模块化的发展史"></a>1.3. 模块化的发展史</h3><ul><li>自执行函数</li><li>AMD (Asynchronous Module Definition)<ul><li>AMD 推崇依赖前置，在定义模块的时候就要声明其依赖的模块</li><li><code>AMD</code>规范则是非同步加载模块，需要定义回调<code>define</code>方式</li></ul></li><li>CMD (Common Module Definition)<ul><li>CMD 推崇就近依赖，只有在用到某个模块的时候再去 require</li></ul></li><li>CommonJS (服务器端开发)</li><li>UMD (Universal Module Definition)<ul><li>UMD 叫做通用模块定义规范(Universal Module Definition)可以通过运行时或者编译时让同一个代码模块在使用 CommonJs、CMD 甚至是 AMD 的项目中运行</li></ul></li><li>ES6 Module (ESM，JS 官方标准模块定义方式)</li></ul><h3 id="1-4-common-js-和-ES6-中模块引入的区别"><a href="#1-4-common-js-和-ES6-中模块引入的区别" class="headerlink" title="1. 4 common.js 和 ES6 中模块引入的区别"></a>1. 4 common.js 和 ES6 中模块引入的区别</h3><p>目前浏览器端虽写法是以 esm 为主，但是各种前端工具转换为 cjs</p><p><strong>在使用上的差别主要有：</strong></p><ul><li><p><code>CommonJS</code> 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p></li><li><p><code>CommonJS</code> 模块是运行时加载，ES6 模块是编译时输出接口（静态编译）。</p></li><li><p><code>CommonJs</code> 是单个值导出，<code>ES6 Module</code> 可以导出多个</p></li><li><p><code>CommonJs</code> 是动态语法可以写在判断里，<code>ES6 Module</code> 静态语法只能写在顶层</p></li><li><p><code>CommonJs</code> 的 <code>this</code> 是当前模块，<code>ES6 Module</code> 的 <code>this</code> 是 <code>undefined</code></p></li><li><p><code>CommonJS</code>是服务器端模块的规范，<code>CommonJS</code>规范加载模块是同步的</p></li></ul><p><strong>注意：</strong></p><ul><li>export {&lt;变量&gt;}这种方式一般称为 命名式导出 或者 具名导出，导出的是一个<code>变量的引用</code>。</li><li>export default 这种方式称为 默认导出 或者 匿名导出，导出的是一个值。</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// a.js</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">20</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  x <span class="token operator">=</span> <span class="token number">100</span>  y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> y<span class="token comment">// b.js</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> x <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token keyword">import</span> y <span class="token keyword">from</span> <span class="token string">"./a.js"</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token comment">// 100,20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、实现"><a href="#二、实现" class="headerlink" title="二、实现"></a>二、实现</h2><h3 id="2-1-有依赖的自执行函数"><a href="#2-1-有依赖的自执行函数" class="headerlink" title="2.1 有依赖的自执行函数"></a>2.1 有依赖的自执行函数</h3><ul><li>手工引入依赖</li><li>依赖关系不明显</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span>  global<span class="token punctuation">.</span>addModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> add <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span>  global<span class="token punctuation">.</span>minusModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> minus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">global<span class="token punctuation">,</span> addModule<span class="token punctuation">,</span> minusModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  global<span class="token punctuation">.</span>mathModule <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">add</span><span class="token operator">:</span> addModule<span class="token punctuation">.</span>add<span class="token punctuation">,</span> <span class="token literal-property property">minus</span><span class="token operator">:</span> minusModule<span class="token punctuation">.</span>minus <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">,</span> addModule<span class="token punctuation">,</span> minusModule<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mathModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-AMD"><a href="#2-2-AMD" class="headerlink" title="2.2 AMD"></a>2.2 AMD</h3><ul><li><p><a href="https://requirejs.org/docs/release/2.1.20/minified/require.js">require.js</a></p></li><li><p>前置依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> moduleFactory <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  moduleFactory<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> factory<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">dependencies<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>dependencies<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">dependency</span><span class="token punctuation">)</span> <span class="token operator">=></span> moduleFactory<span class="token punctuation">[</span>dependency<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    add<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>    minus<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token string">"minusModule"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">addModule<span class="token punctuation">,</span> minusModule</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>addModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> minusModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-CMD"><a href="#2-3-CMD" class="headerlink" title="2.3. CMD"></a>2.3. CMD</h3><ul><li><code>CMD</code> 叫做通用模块定义规范（Common Module Defination )</li><li><a href="http://seajs.org/">seajs</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> factories <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> modules <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> factory <span class="token operator">=</span> factories<span class="token punctuation">[</span>name<span class="token punctuation">]</span>  <span class="token keyword">let</span> exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token function">factory</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">)</span>  modules<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> exports  <span class="token keyword">return</span> exports<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">define</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  factories<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> factory<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">require</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  exports<span class="token punctuation">.</span><span class="token function-variable function">minus</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">require<span class="token punctuation">,</span> exports</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> addModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"addModule"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result1 <span class="token operator">=</span> addModule<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span>  <span class="token keyword">var</span> minusModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"minusModule"</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> result2 <span class="token operator">=</span> minusModule<span class="token punctuation">.</span><span class="token function">minus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 虚拟列表之 FixedSizeList 封装</title>
      <link href="/blog/2023/01/06/012fixedsizelist-feng-zhuang/"/>
      <url>/blog/2023/01/06/012fixedsizelist-feng-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-长列表渲染"><a href="#1-长列表渲染" class="headerlink" title="1. 长列表渲染"></a>1. 长列表渲染</h2><ul><li>如果有海量数据在浏览器里一次性渲染会有以下问题<ul><li>计算时间过长，用户需要长时间等待，体验差</li><li>CPU 处理时间过长，滑动过程中可能卡顿</li><li>GPU 负载过高，渲染不过来会出现闪动</li><li>内存占用过多，严重会引起浏览器卡死和崩溃</li></ul></li><li>优化方法<ul><li>下拉底部加载更多实现懒加载，此方法随着内容越来越多，会引起大量的重排和重绘，依赖可能会卡顿</li><li>虚拟列表 其实我们的屏幕可视区域是有限的，能看到的数据也是有限的,所以可以在用户滚动时，只渲染可视区域内的内容即可,不可见区域用空白占位填充, 这样的话页面中的 DOM 元素少，CPU、GPU 和内存负载小</li></ul></li></ul><h2 id="2-长列表组件"><a href="#2-长列表组件" class="headerlink" title="2.长列表组件"></a>2.长列表组件</h2><ul><li><a href="https://github.com/bvaughn/react-virtualized">react-virtualized</a></li><li><a href="https://github.com/bvaughn/react-window">react-window</a></li><li><a href="https://react-window.vercel.app/#/examples/list/fixed-size">react-window.vercel.app</a></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i react<span class="token operator">-</span>window <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-固定高度列表实战"><a href="#3-固定高度列表实战" class="headerlink" title="3. 固定高度列表实战"></a>3. 固定高度列表实战</h2><h3 id="3-1-src-index-js"><a href="#3-1-src-index-js" class="headerlink" title="3.1 src\index.js"></a>3.1 src\index.js</h3><blockquote><p>src\index.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">"react-dom/client"</span><span class="token keyword">import</span> FixedSizeList <span class="token keyword">from</span> <span class="token string">"./fixed-size-list"</span><span class="token keyword">const</span> root <span class="token operator">=</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createRoot</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>FixedSizeList <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-fixed-size-list-js"><a href="#3-2-fixed-size-list-js" class="headerlink" title="3.2 fixed-size-list.js"></a>3.2 fixed-size-list.js</h3><blockquote><p>src\fixed-size-list.js</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"react-window"</span><span class="token keyword">import</span> <span class="token string">"./fixed-size-list.css"</span><span class="token keyword">const</span> <span class="token function-variable function">Row</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> index<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token punctuation">&#123;</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"ListItemOdd"</span> <span class="token operator">:</span> <span class="token string">"ListItemEven"</span><span class="token punctuation">&#125;</span> style<span class="token operator">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span><span class="token operator">></span>    Row<span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>FixedSizeList      className<span class="token operator">=</span><span class="token string">"List"</span>      height<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span>      width<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span>      itemSize<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">50</span><span class="token punctuation">&#125;</span>      itemCount<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">&#125;</span>    <span class="token operator">></span>      <span class="token punctuation">&#123;</span>Row<span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>FixedSizeList<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-fixed-size-list-css"><a href="#3-3-fixed-size-list-css" class="headerlink" title="3.3 fixed-size-list.css"></a>3.3 fixed-size-list.css</h3><blockquote><p>src\fixed-size-list.css</p></blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.List</span> <span class="token punctuation">&#123;</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid gray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemEven,.ListItemOdd</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemOdd</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.ListItemEven</span> <span class="token punctuation">&#123;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-FixedSizeList实现"><a href="#4-FixedSizeList实现" class="headerlink" title="4.FixedSizeList实现"></a>4.<code>FixedSizeList</code>实现</h2><h3 id="4-1-全部渲染"><a href="#4-1-全部渲染" class="headerlink" title="4. 1 全部渲染"></a>4. 1 全部渲染</h3><blockquote><p>首先实现传入的数据页面全部渲染</p></blockquote><p><img src="https://static.zhufengpeixun.com/reactwindowfixed_1651225094542.jpg" alt="原理"></p><h4 id="4-1-1fixed-size-list-js"><a href="#4-1-1fixed-size-list-js" class="headerlink" title="4.1 .1fixed-size-list.js"></a>4.1 .1fixed-size-list.js</h4><p>src\fixed-size-list.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./react-window"</span><span class="token keyword">import</span> <span class="token string">"./fixed-size-list.css"</span><span class="token keyword">const</span> <span class="token function-variable function">Row</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> index<span class="token punctuation">,</span> style <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>index <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token string">"ListItemOdd"</span> <span class="token operator">:</span> <span class="token string">"ListItemEven"</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>style<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    Row</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FixedSizeList</span></span>      <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>List<span class="token punctuation">"</span></span>      <span class="token attr-name">height</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">width</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">itemSize</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">50</span><span class="token punctuation">&#125;</span></span>      <span class="token attr-name">itemCount</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token number">1000</span><span class="token punctuation">&#125;</span></span>    <span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token punctuation">&#123;</span>Row<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FixedSizeList</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-2-react-window-index-js"><a href="#4-1-2-react-window-index-js" class="headerlink" title="4.1.2 react-window\index.js"></a>4.1.2 react-window\index.js</h4><p>src\react-window\index.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> <span class="token keyword">default</span> <span class="token keyword">as</span> FixedSizeList <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./FixedSizeList"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-1-3-FixedSizeList-js"><a href="#4-1-3-FixedSizeList-js" class="headerlink" title="4.1.3 FixedSizeList.js"></a>4.1.3 FixedSizeList.js</h4><p>src\react-window\FixedSizeList.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> createListComponent <span class="token keyword">from</span> <span class="token string">"./createListComponent"</span><span class="token keyword">const</span> FixedSizeList <span class="token operator">=</span> <span class="token function">createListComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">getItemSize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize<span class="token punctuation">,</span> <span class="token comment">//每个条目的高度</span>  <span class="token function-variable function">getEstimatedTotalSize</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize<span class="token punctuation">,</span> itemCount <span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize <span class="token operator">*</span> itemCount<span class="token punctuation">,</span> <span class="token comment">//获取预计的总高度</span>  <span class="token function-variable function">getItemOffset</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span> itemSize <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> itemSize <span class="token operator">*</span> index<span class="token punctuation">,</span> <span class="token comment">//获取每个条目的偏移量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> FixedSizeList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-4-createListComponent-js"><a href="#4-1-4-createListComponent-js" class="headerlink" title="4.1.4 createListComponent.js"></a>4.1.4 createListComponent.js</h4><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">createListComponent</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  getEstimatedTotalSize<span class="token punctuation">,</span> <span class="token comment">//获取预计的总高度</span>  getItemSize<span class="token punctuation">,</span> <span class="token comment">//每个条目的高度</span>  getItemOffset<span class="token punctuation">,</span> <span class="token comment">//获取每个条目的偏移量</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> itemCount<span class="token punctuation">,</span> <span class="token literal-property property">children</span><span class="token operator">:</span> ComponentType <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props      <span class="token keyword">const</span> containerStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"relative"</span><span class="token punctuation">,</span>        width<span class="token punctuation">,</span>        height<span class="token punctuation">,</span>        <span class="token literal-property property">overflow</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>        <span class="token literal-property property">willChange</span><span class="token operator">:</span> <span class="token string">"transform"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> contentStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token function">getEstimatedTotalSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>itemCount <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> itemCount<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>            <span class="token operator">&lt;</span>ComponentType              key<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>              index<span class="token operator">=</span><span class="token punctuation">&#123;</span>index<span class="token punctuation">&#125;</span>              style<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_getItemStyle</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            <span class="token operator">/</span><span class="token operator">></span>          <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span>containerStyle<span class="token punctuation">&#125;</span><span class="token operator">></span>          <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">&#123;</span>contentStyle<span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token punctuation">&#123;</span>items<span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取每个item的样式</span>    <span class="token function-variable function">_getItemStyle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> style <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">"absolute"</span><span class="token punctuation">,</span>        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token string">"100%"</span><span class="token punctuation">,</span>        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token function">getItemSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token function">getItemOffset</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> style    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2-渲染首屏"><a href="#4-2-渲染首屏" class="headerlink" title="4.2. 渲染首屏"></a>4.2. 渲染首屏</h2><h3 id="4-2-1-FixedSizeList-js"><a href="#4-2-1-FixedSizeList-js" class="headerlink" title="4.2.1 FixedSizeList.js"></a>4.2.1 FixedSizeList.js</h3><p>src\react-window\FixedSizeList.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import createListComponent from './createListComponent';const FixedSizeList = createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getItemSize: (&#123; itemSize &#125;) => itemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize: (&#123; itemSize, itemCount &#125;) => itemSize * itemCount, //获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset: (&#123; itemSize &#125;, index) => itemSize * index, //获取每个条目的偏移量</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   getStartIndexForOffset: (&#123; itemSize &#125;, offset) => Math.floor(offset / itemSize),//获取起始索引</span><span class="token prefix inserted">+</span><span class="token line">   getStopIndexForStartIndex: (&#123; height, itemSize &#125;, startIndex) => &#123;//获取结束索引</span><span class="token prefix inserted">+</span><span class="token line">       const numVisibleItems = Math.ceil(height / itemSize);</span><span class="token prefix inserted">+</span><span class="token line">       return startIndex + numVisibleItems - 1;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;);export default FixedSizeList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-2-createListComponent-js"><a href="#4-2-2-createListComponent-js" class="headerlink" title="4.2.2 createListComponent.js"></a>4.2.2 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix inserted">+</span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix inserted">+</span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span><span class="token prefix unchanged"> </span><span class="token line">               &lt;div style=&#123;containerStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix inserted">+</span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span><span class="token prefix inserted">+</span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix inserted">+</span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix inserted">+</span><span class="token line">           return [startIndex, stopIndex];</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-监听滚动"><a href="#4-3-监听滚动" class="headerlink" title="4.3. 监听滚动"></a>4.3. 监听滚动</h2><h3 id="4-3-1-createListComponent-js"><a href="#4-3-1-createListComponent-js" class="headerlink" title="4.3.1 createListComponent.js"></a>4.3.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span><span class="token prefix unchanged"> </span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix unchanged"> </span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span><span class="token prefix unchanged"> </span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix unchanged"> </span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;></span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       onScroll = event => &#123;</span><span class="token prefix inserted">+</span><span class="token line">           const &#123; scrollTop &#125; = event.currentTarget;</span><span class="token prefix inserted">+</span><span class="token line">           this.setState(&#123; scrollOffset: scrollTop &#125;);</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span><span class="token prefix unchanged"> </span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix unchanged"> </span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix unchanged"> </span><span class="token line">           return [startIndex, stopIndex]</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-4-overscan-增加缓存区域"><a href="#4-4-overscan-增加缓存区域" class="headerlink" title="4.4. overscan (增加缓存区域)"></a>4.4. overscan (增加缓存区域)</h2><ul><li>过扫描实质上是切断图片的边缘，以确保所有重要的东西显示在屏幕上 <img src="https://static.zhufengpeixun.com/Overscan_1651392914894.png" alt="img"></li></ul><h3 id="4-4-1-createListComponent-js"><a href="#4-4-1-createListComponent-js" class="headerlink" title="4.4.1 createListComponent.js"></a>4.4.1 createListComponent.js</h3><p>src\react-window\createListComponent.js</p><pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">import React from 'react';export default function createListComponent(&#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   getEstimatedTotalSize,//获取预计的总高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemSize,//每个条目的高度</span><span class="token prefix unchanged"> </span><span class="token line">   getItemOffset,//获取每个条目的偏移量</span><span class="token prefix unchanged"> </span><span class="token line">   getStartIndexForOffset,</span><span class="token prefix unchanged"> </span><span class="token line">   getStopIndexForStartIndex</span></span>&#125;) &#123;<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   return class extends React.Component &#123;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">       static defaultProps = &#123;</span><span class="token prefix inserted">+</span><span class="token line">           overscanCount: 2</span><span class="token prefix inserted">+</span><span class="token line">       &#125;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">       state = &#123; scrollOffset: 0 &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       render() &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; width, height, itemCount, children: ComponentType &#125; = this.props;</span><span class="token prefix unchanged"> </span><span class="token line">           const containerStyle = &#123; position: 'relative', width, height, overflow: 'auto', willChange: 'transform' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const contentStyle = &#123; height: getEstimatedTotalSize(this.props), width: '100%' &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           const items = [];</span><span class="token prefix unchanged"> </span><span class="token line">           if (itemCount > 0) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               const [startIndex, stopIndex] = this._getRangeToRender();</span><span class="token prefix unchanged"> </span><span class="token line">               for (let index = startIndex; index &lt;= stopIndex; index++) &#123;</span><span class="token prefix unchanged"> </span><span class="token line">                   items.push(</span><span class="token prefix unchanged"> </span><span class="token line">                       &lt;ComponentType key=&#123;index&#125; index=&#123;index&#125; style=&#123;this._getItemStyle(index)&#125; /></span><span class="token prefix unchanged"> </span><span class="token line">                   );</span><span class="token prefix unchanged"> </span><span class="token line">               &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;</span><span class="token prefix unchanged"> </span><span class="token line">           return (</span><span class="token prefix unchanged"> </span><span class="token line">               &lt;div style=&#123;containerStyle&#125; onScroll=&#123;this.onScroll&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;div style=&#123;contentStyle&#125;></span><span class="token prefix unchanged"> </span><span class="token line">                       &#123;items&#125;</span><span class="token prefix unchanged"> </span><span class="token line">                   &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">               &lt;/div></span><span class="token prefix unchanged"> </span><span class="token line">           )</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       onScroll = event => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollTop &#125; = event.currentTarget;</span><span class="token prefix unchanged"> </span><span class="token line">           this.setState(&#123; scrollOffset: scrollTop &#125;);</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getItemStyle = (index) => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const style = &#123;</span><span class="token prefix unchanged"> </span><span class="token line">               position: 'absolute',</span><span class="token prefix unchanged"> </span><span class="token line">               width: '100%',</span><span class="token prefix unchanged"> </span><span class="token line">               height: getItemSize(this.props),</span><span class="token prefix unchanged"> </span><span class="token line">               top: getItemOffset(this.props, index)</span><span class="token prefix unchanged"> </span><span class="token line">           &#125;;</span><span class="token prefix unchanged"> </span><span class="token line">           return style;</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">       _getRangeToRender = () => &#123;</span><span class="token prefix unchanged"> </span><span class="token line">           const &#123; scrollOffset &#125; = this.state;</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">           const &#123; itemCount, overscanCount &#125; = this.props;</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">           const startIndex = getStartIndexForOffset(this.props, scrollOffset);</span><span class="token prefix unchanged"> </span><span class="token line">           const stopIndex = getStopIndexForStartIndex(this.props, startIndex);</span><span class="token prefix unchanged"> </span><span class="token line">           return [</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">               Math.max(0, startIndex - overscanCount),</span><span class="token prefix inserted">+</span><span class="token line">               Math.max(0, Math.min(itemCount - 1, stopIndex + overscanCount)),</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">               startIndex, stopIndex]</span><span class="token prefix unchanged"> </span><span class="token line">       &#125;</span><span class="token prefix unchanged"> </span><span class="token line">   &#125;</span></span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> react全家桶 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存机制介绍与缓存策略剖析</title>
      <link href="/blog/2023/01/06/011-liu-lan-qi-de-huan-cun-ji-zhi/"/>
      <url>/blog/2023/01/06/011-liu-lan-qi-de-huan-cun-ji-zhi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>缓存可以减少网络  <code>IO</code>  消耗，提高访问速度。浏览器缓存是一种操作简单、效果显著的前端性能优化手段。对于这个操作的必要性，Chrome 官方给出的解释似乎更有说服力一些：</p></blockquote><blockquote><p>通过网络获取内容既速度缓慢又开销巨大。较大的响应需要在客户端与服务器之间进行多次往返通信，这会延迟浏览器获得和处理内容的时间，还会增加访问者的流量费用。因此，缓存并重复利用之前获取的资源的能力成为性能优化的一个关键方面。</p></blockquote><ul><li>很多时候，大家倾向于将浏览器缓存简单地理解为“HTTP 缓存”。但事实上，浏览器缓存机制有四个方面，它们按照获取资源时请求的优先级依次排列如下：</li></ul><ol><li> <code>Memory Cache</code></li><li> <code>Service Worker Cache</code></li><li> <code>HTTP Cache</code></li><li> <code>Push Cache</code></li></ol><blockquote><p>大家对  <code>HTTP Cache</code>（即  <code>Cache-Control</code>、<code>expires</code>  等字段控制的缓存）应该比较熟悉，如果对其它几种缓存可能还没什么概念，我们可以先来看一张线上网站的  <code>Network</code>  面板截图：</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ddfa3219d3f3410fabad2cc0d765dcdf~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>size</code>  这一栏一个特写：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/127ce325ad70464abf9b713d4812fb29~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>大家注意一下非数字——即形如“（<code>from xxx</code>）”这样的描述——对应的资源，这些资源就是我们通过缓存获取到的。其中，“from memory cache”对标到  <code>Memory Cache</code>  类型，“<code>from ServiceWorker</code>”对标到  <code>Service Worker Cache</code>  类型。至于  <code>Push Cache</code>，这个比较特殊，是  <code>HTTP2</code>  的新特性。</p></blockquote><p>本节将会针对这四个方面各个击破。考虑到 HTTP 缓存是最主要、最具有代表性的缓存策略，也是每一位前端工程师都应该深刻理解掌握的性能优化知识点，我们下面优先针对 HTTP 缓存机制进行剖析。</p><h1 id="HTTP-缓存机制探秘"><a href="#HTTP-缓存机制探秘" class="headerlink" title="HTTP 缓存机制探秘"></a>HTTP 缓存机制探秘</h1><hr><p>HTTP 缓存是我们日常开发中最为熟悉的一种缓存机制。它又分为<strong>强缓存</strong>和<strong>协商缓存</strong>。优先级较高的是强缓存，在命中强缓存失败的情况下，才会走协商缓存。</p><h2 id="1-强缓存的特征"><a href="#1-强缓存的特征" class="headerlink" title="1. 强缓存的特征"></a><strong>1. 强缓存的特征</strong></h2><blockquote><p>强缓存是利用  <code>http</code>  头中的  <code>Expires</code>  和  <code>Cache-Control</code>  两个字段来控制的。强缓存中，当请求再次发出时，浏览器会根据其中的  <code>expires</code>  和  <code>cache-control</code>  判断目标资源是否“命中”强缓存，若命中则直接从缓存中获取资源，<strong>不会再与服务端发生通信。</strong></p></blockquote><p>命中强缓存的情况下，返回的  <code>HTTP</code>  状态码为  <code>200</code> （如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb3ff675124489484fe40580bf90a4d~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="2-强缓存的实现：从-expires-到-cache-control"><a href="#2-强缓存的实现：从-expires-到-cache-control" class="headerlink" title="2. 强缓存的实现：从 expires 到 cache-control"></a><strong>2. 强缓存的实现：从 expires 到 cache-control</strong></h2><ul><li>实现强缓存，过去我们一直用  <code>expires</code>。</li><li>当服务器返回响应时，在  <code>Response Headers</code>  中将过期时间写入  <code>expires</code>  字段。像这样：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6157f49ca998455fbfbada92149b0f08~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p>我们给  <code>expires</code>  一个特写：</p><pre class="line-numbers language-none"><code class="language-none">expires: Wed, 11 Sep 2019 16:12:18 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><ul><li>可以看到，<code>expires</code>  是一个时间戳，接下来如果我们试图再次向服务器请求资源，浏览器就会先对比本地时间和  <code>expires</code>  的时间戳，如果本地时间小于  <code>expires</code>  设定的过期时间，那么就直接去缓存中取这个资源。</li><li>从这样的描述中大家也不难猜测，<code>expires</code>  是有问题的，它最大的问题在于对“本地时间”的依赖。如果服务端和客户端的时间设置可能不同，或者我直接手动去把客户端的时间改掉，那么  <code>expires</code>  将无法达到我们的预期。</li><li>考虑到  <code>expires</code>  的局限性，<code>HTTP1.1</code>  新增了  <code>Cache-Control</code>  字段来完成  <code>expires</code>  的任务。<br>expires 能做的事情，Cache-Control 都能做；<code>expires</code>  完成不了的事情，<code>Cache-Control</code>  也能做。因此，<code>Cache-Control</code>  可以视作是  <code>expires</code>  的<strong>完全替代方案</strong>。在当下的前端实践里，我们继续使用  <code>expires</code>  的唯一目的就是<strong>向下兼容</strong>。</li></ul><blockquote><p>现在我们给  <code>Cache-Control</code>  字段一个特写：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cache-control: max-age&#x3D;31536000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>如大家所见，在  <code>Cache-Control</code>  中，我们通过  <code>max-age</code>  来控制资源的有效期。<code>max-age</code>  不是一个时间戳，而是一个时间长度。在本例中，<code>max-age</code>  是 31536000 秒，它意味着该资源在 31536000 秒以内都是有效的，完美地规避了时间戳带来的潜在问题。</p></blockquote><p><strong>Cache-Control 相对于 expires 更加准确，它的优先级也更高。当 Cache-Control 与 expires 同时出现时，我们以 Cache-Control 为准。</strong></p><h2 id="3-Cache-Control-应用分析"><a href="#3-Cache-Control-应用分析" class="headerlink" title="3. Cache-Control 应用分析"></a><strong>3. Cache-Control 应用分析</strong></h2><blockquote><p><code>Cache-Control</code>  的神通，可不止于这一个小小的  <code>max-age</code>。如下的用法也非常常见：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">cache-control: max-age&#x3D;3600, s-maxage&#x3D;31536000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>s-maxage 优先级高于 max-age，两者同时出现时，优先考虑 s-maxage。如果 s-maxage 未过期，则向代理服务器请求其缓存内容。</strong></p><blockquote><p>这个  <code>s-maxage</code>  不像  <code>max-age</code>  一样为大家所熟知。的确，在项目不是特别大的场景下，<code>max-age</code>  足够用了。但在依赖各种<strong>代理</strong>的大型架构中，我们不得不考虑<strong>代理服务器</strong>的缓存问题。<code>s-maxage</code>  就是用于表示  <code>cache</code>  服务器上（比如  <code>cache CDN</code>）的缓存的有效时间的，并只对  <code>public</code>  缓存有效。</p></blockquote><ul><li>此处应注意这样一个细节：<code>s-maxage</code>仅在代理服务器中生效，客户端中我们只考虑<code>max-age</code></li><li>那么什么是  <code>public</code>  缓存呢？说到这里，<code>Cache-Control</code>  中有一些适合放在一起理解的知识点，我们集中梳理一下：</li></ul><p><strong>3.1 public 与 private</strong></p><ul><li><code>public</code>  与  <code>private</code>  是针对资源是否能够被代理服务缓存而存在的一组对立概念。</li><li>如果我们为资源设置了  <code>public</code>，那么它既可以被浏览器缓存，也可以被代理服务器缓存；如果我们设置了  <code>private</code>，则该资源只能被浏览器缓存。<code>private</code>  为<strong>默认值</strong>。但多数情况下，<code>public</code>  并不需要我们手动设置，比如有很多线上网站的  <code>cache-control</code>  是这样的：</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1852b17ee6ad45d2a36f41256079e56e~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><blockquote><p>设置了  <code>s-maxage</code>，没设置  <code>public</code>，那么  <code>CDN</code>  还可以缓存这个资源吗？答案是肯定的。因为明确的缓存信息（例如“<code>max-age</code>”）已表示响应是可以缓存的。</p></blockquote><p><strong>3.2 no-store 与 no-cache</strong></p><ul><li><code>no-cache</code>  绕开了浏览器：我们为资源设置了  <code>no-cache</code>  后，每一次发起请求都不会再去询问浏览器的缓存情况，而是直接向服务端去确认该资源是否过期（即走我们下文即将讲解的协商缓存的路线）。</li><li><code>no-store</code>  比较绝情，顾名思义就是不使用任何缓存策略。在  <code>no-cache</code>  的基础上，它连服务端的缓存确认也绕开了，只允许你直接向服务端发送请求、并下载完整的响应。</li></ul><h2 id="4-协商缓存：浏览器与服务器合作之下的缓存策略"><a href="#4-协商缓存：浏览器与服务器合作之下的缓存策略" class="headerlink" title="4. 协商缓存：浏览器与服务器合作之下的缓存策略"></a><strong>4. 协商缓存：浏览器与服务器合作之下的缓存策略</strong></h2><ul><li>协商缓存依赖于服务端与浏览器之间的通信。</li></ul><blockquote><p>协商缓存机制下，浏览器需要向服务器去询问缓存的相关信息，进而判断是重新发起请求、下载完整的响应，还是从本地获取缓存的资源。</p></blockquote><p>如果服务端提示缓存资源未改动（<code>Not Modified</code>），资源会被<strong>重定向</strong>到浏览器缓存，<strong>这种情况下网络请求对应的状态码是 304</strong>（如下图）。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1386624ba5364d63b29931988a9e8eb5~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><h2 id="5-协商缓存的实现：从-Last-Modified-到-Etag"><a href="#5-协商缓存的实现：从-Last-Modified-到-Etag" class="headerlink" title="5. 协商缓存的实现：从 Last-Modified 到 Etag"></a><strong>5. 协商缓存的实现：从 Last-Modified 到 Etag</strong></h2><blockquote><p><code>Last-Modified</code>  是一个时间戳，如果我们启用了协商缓存，它会在首次请求时随着  <code>Response Headers</code>  返回：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">Last-Modified: Fri, 27 Oct 2017 06:35:57 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>随后我们每次请求时，会带上一个叫  <code>If-Modified-Since</code>  的时间戳字段，它的值正是上一次  <code>response</code>  返回给它的  <code>last-modified</code>  值：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">If-Modified-Since: Fri, 27 Oct 2017 06:35:57 GMT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>服务器接收到这个时间戳后，会比对该时间戳和资源在服务器上的最后修改时间是否一致，从而判断资源是否发生了变化。如果发生了变化，就会返回一个完整的响应内容，并在  <code>Response Headers</code>  中添加新的  <code>Last-Modified</code>值；否则，返回如上图的  <code>304</code>  响应，<code>Response Headers</code>  不会再添加  <code>Last-Modified</code>  字段。</p></blockquote><p><strong>使用 Last-Modified 存在一些弊端，这其中最常见的就是这样两个场景：</strong></p><ul><li>我们编辑了文件，但文件的内容没有改变。服务端并不清楚我们是否真正改变了文件，它仍然通过最后编辑时间进行判断。因此这个资源在再次被请求时，会被当做新资源，进而引发一次完整的响应——不该重新请求的时候，也会重新请求。</li><li>当我们修改文件的速度过快时（比如花了  <code>100ms</code>  完成了改动），由于  <code>If-Modified-Since</code>  只能检查到以秒为最小计量单位的时间差，所以它是感知不到这个改动的——该重新请求的时候，反而没有重新请求了。</li></ul><blockquote><p>这两个场景其实指向了同一个  <code>bug</code>——服务器并没有正确感知文件的变化。为了解决这样的问题，<code>Etag</code>  作为  <code>Last-Modified</code>  的补充出现了。</p></blockquote><ul><li><code>Etag</code>  是由服务器为每个资源生成的唯一的<strong>标识字符串</strong>，这个标识字符串是基于文件内容编码的，只要文件内容不同，它们对应的  <code>Etag</code>  就是不同的，反之亦然。因此  <code>Etag</code>  能够精准地感知文件的变化。</li><li><code>Etag</code>  和  <code>Last-Modified</code>  类似，当首次请求时，我们会在响应头里获取到一个最初的标识符字符串，举个 🌰，它可以是这样的：</li></ul><pre class="line-numbers language-none"><code class="language-none">ETag: W&#x2F;&quot;2a3b-1602480f459&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p>那么下一次请求时，请求头里就会带上一个值相同的、名为  <code>if-None-Match</code>  的字符串供服务端比对了：</p><pre class="line-numbers language-none"><code class="language-none">If-None-Match: W&#x2F;&quot;2a3b-1602480f459&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p><code>Etag</code>  的生成过程需要服务器额外付出开销，会影响服务端的性能，这是它的弊端。因此启用  <code>Etag</code>  需要我们审时度势。正如我们刚刚所提到的——<code>Etag</code>  并不能替代  <code>Last-Modified</code>，它只能作为  <code>Last-Modified</code>  的补充和强化存在。 <strong>Etag 在感知文件变化上比 Last-Modified 更加准确，优先级也更高。当 Etag 和 Last-Modified 同时存在时，以 Etag 为准。</strong></p></blockquote><h1 id="HTTP-缓存决策指南"><a href="#HTTP-缓存决策指南" class="headerlink" title="HTTP 缓存决策指南"></a>HTTP 缓存决策指南</h1><blockquote><p>行文至此，当代 HTTP 缓存技术用到的知识点，我们已经从头到尾挖掘了一遍了。那么在面对一个具体的缓存需求时，我们到底该怎么决策呢？</p></blockquote><p>走到决策建议这一步，我本来想给大家重新画一个流程图。但是画来画去终究不如 Chrome 官方给出的这张清晰、权威：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f5262ee53ab4ae1a2ac27e56ce5bf9c~tplv-k3u1fbpfcp-zoom-1.image"><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22">​ 编辑</p><p><strong>我们现在一起解读一下这张流程图：</strong></p><ul><li>当我们的资源内容不可复用时，直接为  <code>Cache-Control</code>  设置  <code>no-store</code>，拒绝一切形式的缓存；否则考虑是否每次都需要向服务器进行缓存有效确认，如果需要，那么设  <code>Cache-Control</code>  的值为  <code>no-cache</code>；否则考虑该资源是否可以被代理服务器缓存，根据其结果决定是设置为  <code>private</code>  还是  <code>public</code>；然后考虑该资源的过期时间，设置对应的  <code>max-age</code>  和  <code>s-maxage</code>  值；最后，配置协商缓存需要用到的  <code>Etag</code>、<code>Last-Modified</code>  等参数。</li><li>个人非常推崇这张流程图给出的决策建议，也强烈推荐大家在理解以上知识点的基础上，将这张图保存下来、在日常开发中用用看，它的可行度非常高。</li></ul><p>OK，走到这里，本节最大的一座山已经被大家翻过去了。接下来的内容会相对比较轻松，大家放松心情，我们继续前行！</p><h2 id="MemoryCache"><a href="#MemoryCache" class="headerlink" title="MemoryCache"></a>MemoryCache</h2><ul><li><code>MemoryCache</code>，是指存在内存中的缓存。从优先级上来说，它是浏览器最先尝试去命中的一种缓存。从效率上来说，它是响应速度最快的一种缓存。</li><li>内存缓存是快的，也是“短命”的。它和渲染进程“生死相依”，当进程结束后，也就是 tab 关闭以后，内存里的数据也将不复存在。</li></ul><p>那么哪些文件会被放入内存呢？</p><ul><li>事实上，这个划分规则，一直以来是没有定论的。不过想想也可以理解，内存是有限的，很多时候需要先考虑即时呈现的内存余量，再根据具体的情况决定分配给内存和磁盘的资源量的比重——资源存放的位置具有一定的随机性。</li><li>虽然划分规则没有定论，但根据日常开发中观察的结果，包括我们开篇给大家展示的  <code>Network</code>截图，我们至少可以总结出这样的规律：资源存不存内存，浏览器秉承的是“节约原则”。我们发现，<code>Base64</code>  格式的图片，几乎永远可以被塞进  <code>memory cache</code>，这可以视作浏览器为节省渲染开销的“自保行为”；此外，体积不大的  <code>JS</code>、<code>CSS</code>  文件，也有较大地被写入内存的几率——相比之下，较大的  <code>JS</code>、<code>CSS</code>  文件就没有这个待遇了，内存资源是有限的，它们往往被直接甩进磁盘。</li></ul><h2 id="Service-Worker-Cache"><a href="#Service-Worker-Cache" class="headerlink" title="Service Worker Cache"></a>Service Worker Cache</h2><blockquote><p><code>Service Worker</code>  是一种独立于主线程之外的 Javascript 线程。它脱离于浏览器窗体，因此无法直接访问 DOM。这样独立的个性使得  <code>Service Worker</code>  的“个人行为”无法干扰页面的性能，这个“幕后工作者”可以帮我们实现离线缓存、消息推送和网络代理等功能。我们借助  <code>Service worker</code>  实现的离线缓存就称为  <code>Service Worker Cache</code>。</p></blockquote><ul><li><code>Service Worker</code>  的生命周期包括  <code>install</code>、<code>active</code>、<code>working</code>  三个阶段。一旦  <code>Service Worker</code>  被  <code>install</code>，它将始终存在，只会在  <code>active</code>  与  <code>working</code>  之间切换，除非我们主动终止它。这是它可以用来实现离线存储的重要先决条件。</li><li>下面我们就通过实战的方式，一起见识一下  <code>Service Worker</code>  如何为我们实现离线缓存（注意看注释）： 我们首先在入口文件中插入这样一段 JS 代码，用以判断和引入  <code>Service Worker</code>：</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker  <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"/test.js"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"注册成功"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"注册失败"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><blockquote><p>在  <code>test.js</code>  中，我们进行缓存的处理。假设我们需要缓存的文件分别是  <code>test.html</code>,<code>test.css</code>  和  <code>test.js</code>：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Service Worker会监听 install事件，我们在其对应的回调里可以实现初始化的逻辑</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>    <span class="token comment">// 考虑到缓存也需要更新，open内传入的参数为缓存的版本号</span>    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token comment">// 此处传入指定的需缓存的文件名</span>        <span class="token string">"/test.html"</span><span class="token punctuation">,</span>        <span class="token string">"/test.css"</span><span class="token punctuation">,</span>        <span class="token string">"/test.js"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// Service Worker会监听所有的网络请求，网络请求的产生触发的是fetch事件，我们可以在其对应的监听函数中实现对请求的拦截，进而判断是否有对应到该请求的缓存，实现从Service Worker中取到缓存的目的</span>self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>    <span class="token comment">// 尝试匹配该请求对应的缓存值</span>    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果匹配到了，调用Server Worker缓存</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res      <span class="token punctuation">&#125;</span>      <span class="token comment">// 如果没匹配到，向服务端发起这个资源请求</span>      <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response <span class="token operator">||</span> response<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> response        <span class="token punctuation">&#125;</span>        <span class="token comment">// 请求成功的话，将请求缓存起来。</span>        caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">cache</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="%22%E7%82%B9%E5%87%BB%E5%B9%B6%E6%8B%96%E6%8B%BD%E4%BB%A5%E7%A7%BB%E5%8A%A8%22"></p><p><strong>PS</strong>：大家注意  <code>Server Worker</code>  对协议是有要求的，必须以  <code>https</code>  协议为前提。</p><h2 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h2><blockquote><p>预告：本小节定位为基础科普向，对 Push Cache 有深入挖掘兴趣的同学，强烈推荐拓展阅读 Chrome 工程师 Jake Archibald 的这篇  <a href="https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/" title="HTTP/2 push is tougher than I thought (opens new window)">HTTP/2 push is tougher than I thought (opens new window)</a>。</p></blockquote><ul><li><code>Push Cache</code>  是指  <code>HTTP2</code>  在  <code>server push</code>  阶段存在的缓存。这块的知识比较新，应用也还处于萌芽阶段，我找了好几个网站也没找到一个合适的案例来给大家做具体的介绍。但应用范围有限不代表不重要——<code>HTTP2</code>  是趋势、是未来。在它还未被推而广之的此时此刻，我仍希望大家能对  <code>Push Cache</code>  的关键特性有所了解：</li></ul><!----><ul><li><code>Push Cache</code>  是缓存的最后一道防线。浏览器只有在  <code>Memory Cache</code>、<code>HTTP Cache</code>  和  <code>Service Worker Cache</code>  均未命中的情况下才会去询问  <code>Push Cache</code>。</li><li><code>Push Cache</code>  是一种存在于会话阶段的缓存，当  <code>session</code>  终止时，缓存也随之释放。</li><li>不同的页面只要共享了同一个  <code>HTTP2</code>  连接，那么它们就可以共享同一个  <code>Push Cache</code>。</li></ul><p>更多的特性和应用，期待大家可以在日后的开发过程中去挖掘和实践。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><blockquote><p>小建议！很多人在学习缓存这块知识的时候可能多少会有这样的感觉：对浏览器缓存，只能描述个大致，却说不上深层原理；好不容易记住了每个字段怎么用，过几天又给忘了。这是因为缓存部分的知识，具有“细碎、迭代快”的特点。对于这样的知识，我们应该尝试先划分出层次和重点，归纳出完整的体系，然后针对每个知识点去各个击破。</p></blockquote><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全问题：CSRF 和 XSS</title>
      <link href="/blog/2023/01/06/010-wang-luo-an-quan/"/>
      <url>/blog/2023/01/06/010-wang-luo-an-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h2><ul><li><code>CSRF</code>：基本概念、攻击方式、防御措施</li><li><code>XSS</code>：基本概念、攻击方式、防御措施</li></ul><blockquote><p>有人问：<code>SQL</code>注入算吗？答案：这个其实跟前端的关系不是很大。</p></blockquote><h2 id="2-CSRF"><a href="#2-CSRF" class="headerlink" title="2 CSRF"></a>2 CSRF</h2><h3 id="2-1-CSRF-的基本概念、缩写、全称"><a href="#2-1-CSRF-的基本概念、缩写、全称" class="headerlink" title="2.1 CSRF 的基本概念、缩写、全称"></a>2.1 CSRF 的基本概念、缩写、全称</h3><blockquote><p><code>CSRF</code>（<code>Cross-site request forgery</code>）：<strong>跨站请求伪造</strong>。</p></blockquote><h3 id="2-2-CSRF-的攻击原理"><a href="#2-2-CSRF-的攻击原理" class="headerlink" title="2.2 CSRF 的攻击原理"></a>2.2 CSRF 的攻击原理</h3><p><img src="https://s.poetries.work/gitee/2020/07/17.png" alt="img"></p><blockquote><p>用户是网站 A 的注册用户，且登录进去，于是网站 A 就给用户下发<code>cookie</code>。</p></blockquote><p>要完成一次<code>CSRF</code>攻击，受害者必须满足<strong>两个必要的条件</strong>：</p><ol><li>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code>。（如果用户没有登录网站<code>A</code>，那么网站<code>B</code>在诱导的时候，请求网站<code>A</code>的<code>api</code>接口时，会提示你登录）</li><li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code>（其实是利用了网站<code>A</code>的漏洞）。</li></ol><blockquote><p><code>cookie</code>保证了用户可以处于登录状态，但网站<code>B</code>其实拿不到 <code>cookie</code>。</p></blockquote><p><strong>案例</strong>（钓鱼网站取钱）</p><h3 id="2-3-CSRF-如何防御"><a href="#2-3-CSRF-如何防御" class="headerlink" title="2.3 CSRF 如何防御"></a>2.3 CSRF 如何防御</h3><h4 id="方法一、Token-验证：（用的最多）"><a href="#方法一、Token-验证：（用的最多）" class="headerlink" title="方法一、Token 验证：（用的最多）"></a><strong>方法一、Token 验证：</strong>（用的最多）</h4><ol><li>服务器发送给客户端一个<code>token</code>；</li><li>客户端提交的表单中带着这个<code>token</code>。</li><li>如果这个 <code>token</code> 不合法，那么服务器拒绝这个请求。</li></ol><h4 id="方法二：隐藏令牌："><a href="#方法二：隐藏令牌：" class="headerlink" title="方法二：隐藏令牌："></a><strong>方法二：隐藏令牌：</strong></h4><ul><li>把 <code>token</code> 隐藏在 <code>http</code> 的 <code>head</code>头中。</li></ul><blockquote><p>方法二和方法一有点像，本质上没有太大区别，只是使用方式上有区别。</p></blockquote><h4 id="方法三、Referer-验证："><a href="#方法三、Referer-验证：" class="headerlink" title="方法三、Referer 验证："></a><strong>方法三、Referer 验证：</strong></h4><blockquote><p><code>Referer</code> 指的是页面请求来源。意思是，<strong>只接受本站的请求，服务器才做响应</strong>；如果不是，就拦截。（可以仿造）</p></blockquote><h4 id="方法四、添加验证码（体验不好）"><a href="#方法四、添加验证码（体验不好）" class="headerlink" title="方法四、添加验证码（体验不好）"></a><strong>方法四、添加验证码（体验不好）</strong></h4><blockquote><p>服务端生成图片发送给客户端</p></blockquote><h2 id="3-XSS"><a href="#3-XSS" class="headerlink" title="3 XSS"></a>3 XSS</h2><h3 id="3-1-XSS-的基本概念"><a href="#3-1-XSS-的基本概念" class="headerlink" title="3.1 XSS 的基本概念"></a>3.1 XSS 的基本概念</h3><blockquote><p><code>XSS（Cross Site Scripting）</code>：<strong>跨域脚本攻击</strong>。</p></blockquote><h3 id="3-2-XSS-的攻击原理"><a href="#3-2-XSS-的攻击原理" class="headerlink" title="3.2 XSS 的攻击原理"></a>3.2 XSS 的攻击原理</h3><blockquote><p><code>XSS</code>攻击的核心原理是：不需要你做任何的登录认证，它会通过合法的操作（比如在<code>url</code>中输入、在评论框中输入），向你的页面注入脚本（可能是<code>js</code>、<code>hmtl</code>代码块等）。</p></blockquote><blockquote><p>最后导致的结果可能是：</p></blockquote><ul><li>盗用<code>Cookie</code></li><li>破坏页面的正常结构，插入广告等恶意内容</li><li><code>D-doss</code>攻击（消耗服务器带宽）</li></ul><h3 id="3-3-XSS-的攻击方式和防范措施"><a href="#3-3-XSS-的攻击方式和防范措施" class="headerlink" title="3.3 XSS 的攻击方式和防范措施"></a>3.3 XSS 的攻击方式和防范措施</h3><h4 id="1-反射型（基于后端）"><a href="#1-反射型（基于后端）" class="headerlink" title="1. 反射型（基于后端）"></a>1. 反射型（基于后端）</h4><blockquote><p>发出请求时，<code>XSS</code>代码出现在<code>url</code>中，作为输入提交到服务器端，服务器端解析后响应，<code>XSS</code>代码随响应内容一起传回给浏览器，最后浏览器解析执行<code>XSS</code>代码。这个过程像一次反射，所以叫反射型<code>XSS</code></p></blockquote><p>​ <strong>案例 用户 type 参数传递什么返回什么</strong></p><ul><li><p><code>?type=&lt;script&gt;alart(1)&lt;/script&gt;</code></p></li><li><p>chrome 发现路径存在异常 会有 xss 屏蔽功能</p></li><li><p>诱导用户点击（一次性）拿到用户 cookier</p></li></ul><p><strong>解决方式</strong></p><ul><li>服务端查询参数 加上<code>encodeURLComponent(req.query.type)</code>转码</li></ul><h4 id="2、DOM-Based-不基于后端"><a href="#2、DOM-Based-不基于后端" class="headerlink" title="2、DOM-Based(不基于后端)"></a>2、DOM-Based(不基于后端)</h4><blockquote><p>修改属性 插入内容 document.write…</p></blockquote><p>​ <strong>案例 输入图片地址 然后出现图片</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;img src = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token operator">&lt;</span>img src <span class="token operator">=</span><span class="token string">"xxx"</span> onerror<span class="token operator">=</span><span class="token string">"alert(1)"</span> id<span class="token operator">=</span><span class="token string">""</span> <span class="token operator">></span>用户输入 xxx<span class="token string">" onerror="</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token string">" id="</span> 页面就会一直弹框解决方法<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#box"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;img src = '</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURL</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#url'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">'></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决方法：</strong></p><ul><li>客户端对内容进行<code>encodeURL（）</code></li></ul><h4 id="3、存储型（恶意脚本存储到服务器）"><a href="#3、存储型（恶意脚本存储到服务器）" class="headerlink" title="3、存储型（恶意脚本存储到服务器）"></a>3、存储型（恶意脚本存储到服务器）</h4><blockquote><p>存储型<code>XSS</code>和反射型<code>XSS</code>的差别在于，提交的代码会存储在服务器端（数据库、内存、文件系统等），下次请求时目标页面时不用再提交 XSS 代码。</p></blockquote><p>​ **案例 ： 评论 功能 **</p><pre class="line-numbers language-none"><code class="language-none">用户评论的的时候添加恶意脚本   存储到服务器然后其他人获取评论列表 就会被脚本攻击  （范围广）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解决方法：</strong></p><ul><li><p>客户端传递给服务器时候，需要校验先过滤一下</p></li><li><p>服务器再做一次过滤</p></li><li><p>直接在输出的时候过滤</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">encodeHtml</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> str    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">"</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;quot;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">'</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;apos;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;amp;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;lt;"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">></span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">"&amp;gt;"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="3-4-XSS-的防范措施（encode-过滤）"><a href="#3-4-XSS-的防范措施（encode-过滤）" class="headerlink" title="3.4 XSS 的防范措施（encode + 过滤）"></a>3.4 XSS 的防范措施（encode + 过滤）</h3><p><strong>XSS 的防范措施主要有三个：</strong></p><h4 id="1-编码："><a href="#1-编码：" class="headerlink" title="1. 编码："></a><strong>1. 编码</strong>：</h4><blockquote><p>对用户输入的数据进行<code>HTML Entity</code>编码。</p></blockquote><blockquote><p><code>Encode</code>的作用是将<code>$var</code>等一些字符进行转化，使得浏览器在最终输出结果上是一样的。</p></blockquote><h4 id="2、过滤："><a href="#2、过滤：" class="headerlink" title="2、过滤："></a><strong>2、过滤：</strong></h4><ul><li>移除用户输入的和事件相关的属性。如<code>onerror</code>可以自动触发攻击，还有<code>onclick</code>等。（总而言是，过滤掉一些不安全的内容）</li><li>移除用户输入的<code>Style</code>节点、<code>Script</code>节点、<code>Iframe</code>节点。（尤其是<code>Script</code>节点，它可是支持跨域的呀，一定要移除）。</li></ul><h4 id="3、校正"><a href="#3、校正" class="headerlink" title="3、校正"></a><strong>3、校正</strong></h4><ul><li>避免直接对<code>HTML Entity</code>进行解码。</li><li>使用<code>DOM Parse</code>转换，校正不配对的<code>DOM</code>标签。</li></ul><blockquote><p>备注：我们应该去了解一下<code>DOM Parse</code>这个概念，它的作用是把文本解析成<code>DOM</code>结构。</p></blockquote><p>比较常用的做法是，通过第一步的编码转成文本，然后第三步转成<code>DOM</code>对象，然后经过第二步的过滤。</p><p><strong>还有一种简洁的答案：</strong></p><p>首先是<strong>encode，如果是富文本</strong>，就白名单。</p><h2 id="4-CSRF-和-XSS-的区别"><a href="#4-CSRF-和-XSS-的区别" class="headerlink" title="4 CSRF 和 XSS 的区别"></a>4 CSRF 和 XSS 的区别</h2><p><strong>区别一：</strong></p><ul><li><code>CSRF</code>：需要用户先登录网站<code>A</code>，获取 <code>cookie</code></li><li><code>XSS</code>：不需要登录。</li></ul><p><strong>区别二：（原理的区别）</strong></p><ul><li><code>CSRF</code>：是利用网站<code>A</code>本身的漏洞，去请求网站<code>A</code>的<code>api</code>。</li><li><code>XSS</code>：是向网站 <code>A</code> 注入 <code>JS</code>代码，然后执行 <code>JS</code> 里的代码，篡改网站<code>A</code>的内容。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>V8 内存管理（垃圾回收机制）</title>
      <link href="/blog/2023/01/04/009v8-nei-cun-guan-li/"/>
      <url>/blog/2023/01/04/009v8-nei-cun-guan-li/</url>
      
        <content type="html"><![CDATA[<blockquote><p>V8 也会申请内存，申请的内存又会分为<strong>堆内存和栈内存</strong></p></blockquote><h3 id="1-1-栈"><a href="#1-1-栈" class="headerlink" title="1.1 栈"></a>1.1 栈</h3><ul><li>栈用于存放 JS 中的<strong>基本类型和引用类型指针</strong></li><li>栈的<strong>空间是连续</strong>的，增加删除只需要移动指针，操作速度非常快</li><li>栈的<strong>空间是有限</strong>的，当栈满了，就会抛出一个错误</li><li>栈一般是在<strong>执行函数时创建</strong>的，在函数执行完毕后，栈就会被销毁</li></ul><h3 id="1-2-堆"><a href="#1-2-堆" class="headerlink" title="1.2 堆"></a>1.2 堆</h3><ul><li>堆主要用于存储 JS 中的<strong>引用类型</strong></li></ul><p><img src="https://static.zhufengpeixun.com/dui_de_nei_cun_fen_pei_1639157736483.jpg" alt="new_large_object_space"></p><h4 id="1-2-1-堆空间分类"><a href="#1-2-1-堆空间分类" class="headerlink" title="1.2.1 堆空间分类"></a>1.2.1 堆空间分类</h4><h5 id="1-2-1-1-新生代-new-space"><a href="#1-2-1-1-新生代-new-space" class="headerlink" title="1.2.1.1 新生代(new space)"></a>1.2.1.1 新生代(new space)</h5><ul><li>新生代内存用于存放一些<strong>生命周期比较短的对象数据</strong></li></ul><h5 id="1-2-1-2-老生代-old-space"><a href="#1-2-1-2-老生代-old-space" class="headerlink" title="1.2.1.2 老生代(old space)"></a>1.2.1.2 老生代(old space)</h5><ul><li>老生代内存用于存放一些<strong>生命周期比较长的对象数据</strong></li><li>当<code>new space</code>的对象进行<strong>两个周期的</strong>垃圾回收后，如果数据还存在<code>new space</code>中，则将他们存放到<code>old space</code>中</li><li>Old Space 使<strong>用标记清除</strong>和<strong>标记整理</strong>的方式进行垃圾回收</li></ul><h4 id="1-2-2-什么是垃圾"><a href="#1-2-2-什么是垃圾" class="headerlink" title="1.2.2 什么是垃圾"></a>1.2.2 什么是垃圾</h4><ul><li>在程序运行过程中肯定会用到一些数据，这些数据会放在堆栈中，但是在程序运行结束后，这些数据就不会再被使用了，那些不再使用的数据就是垃圾</li></ul><h4 id="1-2-3-新生代的垃圾回收"><a href="#1-2-3-新生代的垃圾回收" class="headerlink" title="1.2.3 新生代的垃圾回收"></a>1.2.3 新生代的垃圾回收</h4><ul><li>新生代内存有<strong>两个区域</strong>，分别是<strong>对象区域(from) 和 空闲区域(to)</strong></li><li>新生代内存使用<strong>Scavenger 算法</strong>来管理内存,垃圾回收的入口<ul><li><strong>广度优先遍历</strong> From-Space 中的对象，从根对象出发，广度优先遍历所有能到达的对象,把存活的对象复制到 To-Space</li><li>遍历完成后，<strong>清空</strong> From-Space</li><li>From-Space 和 To-Space <strong>角色互换</strong></li></ul></li><li>复制后的对象在 To-Space 中占用的<strong>内存空间是连续的</strong>，<strong>不会出现碎片问题</strong></li><li>这种垃圾回收方式<strong>快速</strong>而又<strong>高效</strong>，但是<strong>会造成空间浪费</strong>（有 To-Space 空闲区域）</li><li>新生代的 <strong>GC 比较频繁</strong></li><li><strong>新生代的对象转移到老生</strong>代称为<strong>晋升 Promote</strong>,判断晋升的情况有两种<ul><li>经过<strong>一次 GC</strong> 还存活的对象</li><li>对象复制到 To-Space 时，To-Space 的<strong>空间达到一定的限制</strong>（超过 25%）</li></ul></li></ul><h4 id="1-2-4-老生代的垃圾回收"><a href="#1-2-4-老生代的垃圾回收" class="headerlink" title="1.2.4 老生代的垃圾回收"></a>1.2.4 老生代的垃圾回收</h4><blockquote><p>V8 在老生代中的垃圾回收策略采用<strong>Mark-Sweep(标记清除)和 Mark-Compact(标记整理)相结合</strong></p></blockquote><h5 id="1-2-4-1-Mark-Sweep-标记清除"><a href="#1-2-4-1-Mark-Sweep-标记清除" class="headerlink" title="1.2.4.1 Mark-Sweep(标记清除)"></a>1.2.4.1 Mark-Sweep(标记清除)</h5><ul><li>标记清除分为<strong>标记和清除两个阶段</strong></li><li>在标记阶段需要遍历**(深度优先遍历**)堆中的所有对象，并<strong>标记</strong>那些<strong>活着的对象</strong>，然后进入清除阶段。在清除阶段总，只<strong>清除没有被标记的对象</strong></li><li>V8 采取的是<strong>黑色和白色来标记数据</strong>，垃圾收集之前，会把所有的数据设置为<strong>白色</strong>，用来标记所有的<strong>尚未标记的对象</strong>，然后会从 GC 根出发，以<strong>深度优先的方式把所有的能访问到的数据都标记为黑色</strong>，遍历结束后黑色的就是活的数据，白色的就是可以清理的垃圾数据</li><li>由于标记清除只清除死亡对象，而死亡对象在老生代中占用的比例很小，所以<strong>效率较高</strong></li><li>标记清除有一个<strong>问题</strong>就是进行一次标记清楚后<strong>，内存空间往往是不连续</strong>的，会出现很多的<strong>内存碎片</strong>。如果后续需要分配一个需要内存空间较多的对象时，如果所有的内存碎片都不够用，就会出现内存溢出的问题</li></ul><h5 id="1-2-4-2-Mark-Compact（标记整理）"><a href="#1-2-4-2-Mark-Compact（标记整理）" class="headerlink" title="1.2.4.2 Mark-Compact（标记整理）"></a>1.2.4.2 Mark-Compact（标记整理）</h5><ul><li>标记整理正是为了<strong>解决标记清除所带来的内存碎片的问题</strong></li><li>标记整理在标记清除的基础进行修改，将其的<strong>清除阶段变为紧缩极端</strong></li><li>在整理的过程中，将活着的对象向内存区的一段移动，移动完成后直接清理掉边界外的内存</li><li>紧缩过程涉及对象的移动，所以<strong>效率并不是太好，</strong>但是能保证不会生成内存碎片，<strong>一般 10 次标记清理会伴随一次标记整理</strong></li></ul><h4 id="1-2-5-优化"><a href="#1-2-5-优化" class="headerlink" title="1.2.5 优化"></a>1.2.5 优化</h4><ul><li>在执行垃圾回收算法期间，JS 脚本需要暂停，这种叫 Stop the world(全停顿)</li><li>如果回收时间过长，会引起卡顿</li><li>性能优化<ul><li>把大任务拆分小任务，分步执行，类似 fiber</li><li>将一些任务放在后台执行，不占用主线程</li></ul></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">JavaScript执行 垃圾标记、垃圾清理、垃圾整理 JavaScript执行<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>                          <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-2-5-1-Parallel-并行执行"><a href="#1-2-5-1-Parallel-并行执行" class="headerlink" title="1.2.5.1 Parallel(并行执行)"></a>1.2.5.1 Parallel(并行执行)</h5><ul><li><strong>新生代的垃圾回收</strong>采取并行策略提升垃圾回收速度，它会<strong>开启多个辅助线</strong>程来执行新生代的垃圾回收工作</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>辅助线程<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>                    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-5-2-增量标记"><a href="#1-2-5-2-增量标记" class="headerlink" title="1.2.5.2 增量标记"></a>1.2.5.2 增量标记</h5><ul><li>老生代因为对象又大又多，所以垃圾回收的时间更长，采用增量标记的方式进行优化</li><li>增量标记就是把标记<strong>工作分成多个阶段</strong>，每个阶段都只标记一部分对象，和主线程的执行穿插进行</li><li>为了支持增量标记，V8 必须可以支持垃圾回收的<strong>暂停和恢复</strong>，所以采用了<code>黑白灰</code>三色标记法<ul><li>黑色表示这个节点被 GC 根引用到了，而且该节点的子节点都已经标记完成了</li><li>灰色表示这个节点被 GC 根引用到了，但子节点还没被垃圾回收器标记处理，也表明目前正在处理这个节点</li><li>白色表示此节点还没未被垃圾回收器发现，如果在本轮遍历结束时还是白色，那么这块数据就会被收回</li></ul></li><li>引入了灰色标记后，就可以通过判断有没有灰色节点来判断标记是否完成了，如果有灰色节点，下次恢复的应该从灰色节点继续执行</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>开始标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>增量标记<span class="token operator">--</span><span class="token operator">-</span>清理<span class="token operator">--</span><span class="token operator">-</span>整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-2-5-3-Write-barrier-写屏障"><a href="#1-2-5-3-Write-barrier-写屏障" class="headerlink" title="1.2.5.3 Write-barrier(写屏障)"></a>1.2.5.3 Write-barrier(写屏障)</h5><ul><li>当黑色指向白色节点的时候，就会触发写屏障，这个写屏障会把白色节点设置为灰色</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"a"</span> <span class="token punctuation">&#125;</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b1"</span> <span class="token punctuation">&#125;</span><span class="token comment">//执行标记工作</span>global<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"b2"</span> <span class="token punctuation">&#125;</span><span class="token comment">//继续执行标记工作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-2-5-4-Lazy-Sweeping-惰性清理"><a href="#1-2-5-4-Lazy-Sweeping-惰性清理" class="headerlink" title="1.2.5.4 Lazy Sweeping(惰性清理)"></a>1.2.5.4 Lazy Sweeping(惰性清理)</h5><ul><li>当增量标记完成后，如果内存够用，先不清理，等 JS 代码执行完慢慢清理</li></ul><h5 id="1-2-5-5-concurrent-并发回收"><a href="#1-2-5-5-concurrent-并发回收" class="headerlink" title="1.2.5.5 concurrent(并发回收)"></a>1.2.5.5 concurrent(并发回收)</h5><ul><li>其实增量标记和惰性清理并没有减少暂停的总时间</li><li>并发回收就是主线程在执行过程中，辅助线程可以在后台完成垃圾回收工作</li><li>标记操作全都由辅助线程完，清理操作由主线程和辅助线程配合完成</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>         <span class="token operator">--</span><span class="token operator">--</span>辅助线程标记<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>      <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>执行<span class="token constant">JS</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>清理整理<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的继承</title>
      <link href="/blog/2023/01/03/008js-zhong-de-ji-cheng/"/>
      <url>/blog/2023/01/03/008js-zhong-de-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="一、原型链继承"><a href="#一、原型链继承" class="headerlink" title="一、原型链继承"></a>一、原型链继承</h3><p><strong>构造函数、原型和实例的关系：</strong> 每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。</p><p><strong>原型链的基本构想：</strong> 如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也有一个指针指向另一个构造函数。这样就在实例和原型之间构造了一条原型链</p><p><strong>重点：</strong> 让新实例的原型等于父类的实例。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSuperValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>property<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getSubValue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>subproperty<span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span><span class="token function">getSuperValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>实例可继承的属性有：实例的构造函数的属性，父类构造函数属性，父类原型的属性。</li></ol><p><strong>缺点：</strong></p><ol><li>新实例无法向父类构造函数传参。</li><li>继承单一。(只能继承一个父类构造函数)</li><li>所有新实例都会共享父类实例的属性。（原型上的属性是共享的，一个实例修改了原型属性，另一个实例的原性也会被修改！）</li><li>要想为子类原型新增属性和方法，必须要在<code>new SuperType()</code>这样的语句之后执行</li></ol><p>代码如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 继承 SuperType</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、借用构造函数继承"><a href="#二、借用构造函数继承" class="headerlink" title="二、借用构造函数继承"></a>二、借用构造函数继承</h3><p><strong>重点：</strong> 用.call()和.apply()将父类构造函数引入子类函数（在子类函数中做了父类函数的自执行（复制））</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 继承 SuperType 并传参</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"Nicholas"</span><span class="token punctuation">)</span>  <span class="token comment">// 实例属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// "Nicholas";</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment">// 29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>只继承了父类构造函数的属性，没有继承父类原型的属性。</li><li>解决了原型链继承缺点 1、2、3。</li><li>可以继承多个构造函数属性（call 多个）。</li><li>在子实例中可向父实例传参。</li><li>解决了引用值问题</li></ol><p><strong>缺点：</strong></p><ol><li>只能继承父类构造函数的属性。</li><li>无法实现构造函数的复用。</li><li>每个新实例都有父类构造函数的副本，臃肿。</li></ol><h3 id="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"><a href="#三、组合继承（组合原型链继承和借用构造函数继承）（常用）" class="headerlink" title="三、组合继承（组合原型链继承和借用构造函数继承）（常用）"></a>三、组合继承（组合原型链继承和借用构造函数继承）（常用）</h3><p><strong>重点：</strong> 结合了两种模式的优点，<strong>传参和复用</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 继承属性</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token comment">//// 第一次调用 SuperType()</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token comment">// 继承方法</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 第二次调用 SuperType()</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> instance1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"instance1=>"</span><span class="token punctuation">,</span> instance1<span class="token punctuation">)</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"black"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance1<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green,black"</span>instance1<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Nicholas";</span>instance1<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 29</span><span class="token keyword">let</span> instance2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubType</span><span class="token punctuation">(</span><span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>instance2<span class="token punctuation">.</span>colors<span class="token punctuation">)</span> <span class="token comment">// "red,blue,green"</span>instance2<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "Greg";</span>instance2<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 27</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong></p><ol><li>可以继承父类原型上的属性，可以传参，可复用。</li><li>每个新实例引入的构造函数属性是私有的。</li></ol><p><strong>缺点：</strong> 组合继承其实也存在效率问题。最主要的效率问题就是 <strong>父类构造函数始终会被调用两次</strong> ：一次在是创建子类原型时调用，另一次是在子类构造函数中调用</p><h3 id="四、原型式继承"><a href="#四、原型式继承" class="headerlink" title="四、原型式继承"></a>四、原型式继承</h3><p><strong>重点：</strong> 用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//核心代码</span><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Greg"</span>anotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Rob"</span><span class="token punctuation">)</span><span class="token keyword">let</span> yetAnotherPerson <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>yetAnotherPerson<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Linda"</span>yetAnotherPerson<span class="token punctuation">.</span>friends<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"Barbie"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>friends<span class="token punctuation">)</span> <span class="token comment">// "Shelby,Court,Van,Rob,Barbie"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特点：</strong> 类似于复制一个对象，用函数来包装。</p><p><strong>缺点：</strong></p><ol><li><p>所有实例都会继承原型上的属性。</p></li><li><p>无法实现复用。（新实例属性都是后面添加的）</p></li></ol><blockquote><p>原型式继承非常适合不需要单独创建构造函数，但仍然需要在对象间共享信息的场合。但要记住，属性中包含的引用值始终会在相关对象间共享，跟使用原型模式是一样的</p></blockquote><h3 id="五、寄生式继承"><a href="#五、寄生式继承" class="headerlink" title="五、寄生式继承"></a>五、寄生式继承</h3><p><strong>重点：</strong> 就是给原型式继承外面套了个壳子。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">createAnother</span><span class="token punctuation">(</span><span class="token parameter">original</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> clone <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>original<span class="token punctuation">)</span> <span class="token comment">// 通过调用函数创建一个新对象</span>  clone<span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 以某种方式增强这个对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> clone <span class="token comment">// 返回这个对象</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Nicholas"</span><span class="token punctuation">,</span>  <span class="token literal-property property">friends</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"Shelby"</span><span class="token punctuation">,</span> <span class="token string">"Court"</span><span class="token punctuation">,</span> <span class="token string">"Van"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> anotherPerson <span class="token operator">=</span> <span class="token function">createAnother</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>anotherPerson<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// "hi"</span><span class="token comment">//寄生式继承同样适合主要关注对象，而不在乎类型和构造函数的场景。object()函数不是寄生式继承所必需的，任何返回新对象的函数都可以在这里使用。</span><span class="token comment">// 注意 通过寄生式继承给对象添加函数会导致函数难以重用，与构造函数模式类似。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优点：</strong> 没有创建自定义类型，因为只是套了个壳子返回对象（这个），这个函数顺理成章就成了创建的新对象。</p><p><strong>缺点：</strong> 没用到原型，无法复用。</p><h3 id="六、寄生组合式继承（常用）"><a href="#六、寄生组合式继承（常用）" class="headerlink" title="六、寄生组合式继承（常用）"></a>六、寄生组合式继承（常用）</h3><p><strong>重点：</strong> 通过<strong>借用构造函数继承属性</strong> ，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型。</p><p><strong>寄生：</strong> 在函数内返回对象然后调用</p><p><strong>组合：</strong></p><ol><li>函数的原型等于另一个实例。</li><li>在函数中用 apply 或者 call 引入另一个构造函数，可传参</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">object</span><span class="token punctuation">(</span><span class="token parameter">o</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token class-name">F</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> o  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/*function inheritPrototype(subType, superType) &#123;  let prototype = object(superType.prototype); // 创建对象 prototype.constructor = subType; // 增强对象  subType.prototype = prototype; // 赋值对象&#125;*/</span><span class="token keyword">function</span> <span class="token function">SuperType</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token class-name">SuperType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayName</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">SubType</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">SuperType</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">&#125;</span><span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">object</span><span class="token punctuation">(</span>superType<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment">// 创建对象</span>subType<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype <span class="token comment">// 赋值对象</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> subType <span class="token comment">// 修复实例</span><span class="token comment">//inheritPrototype(SubType, SuperType);</span><span class="token class-name">SubType</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">sayAge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优先：</strong> 修复了组合继承的问题</p><p><strong>缺点：</strong> 实现麻烦</p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentry监控</title>
      <link href="/blog/2022/11/16/007sentry/"/>
      <url>/blog/2022/11/16/007sentry/</url>
      
        <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><ul><li><p><a href="https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor">https://github.com/zhilinYu/zhufeng-public/tree/master/%E5%89%8D%E7%AB%AF%E7%9B%91%E6%8E%A7monitor/monitor</a></p></li><li><p><a href="https://retechus.atlassian.net/browse/EW-1744">https://retechus.atlassian.net/browse/EW-1744</a></p></li><li><p><a href="https://juejin.cn/post/6856366626750038023">https://juejin.cn/post/6856366626750038023</a></p></li><li><p><a href="https://juejin.cn/post/6844903984457580551">https://juejin.cn/post/6844903984457580551</a></p></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ul><li><p><a href="https://juejin.cn/post/6914530201430917128">https://juejin.cn/post/6914530201430917128</a></p></li><li><p><a href="https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b">https://juejin.cn/post/6844904088866390024?share_token=72af2173-7dc5-4301-b2a4-35818b82813b</a></p></li></ul><h2 id="上报-SourceMap-版本号"><a href="#上报-SourceMap-版本号" class="headerlink" title="上报 SourceMap 版本号"></a>上报 SourceMap 版本号</h2><ul><li><p><a href="https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729">https://juejin.cn/post/6954303116783124487?share_token=fdac6d5d-73fe-43be-aa02-2930cca74729</a></p></li><li><p><a href="https://juejin.cn/post/7123518368631652382">https://juejin.cn/post/7123518368631652382</a></p></li></ul><h2 id="手动上报"><a href="#手动上报" class="headerlink" title="手动上报"></a>手动上报</h2><ul><li><a href="https://juejin.cn/post/6957475955858210823">https://juejin.cn/post/6957475955858210823</a></li></ul><h2 id="主动捕获错误"><a href="#主动捕获错误" class="headerlink" title="主动捕获错误"></a>主动捕获错误</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sentry<span class="token punctuation">.</span><span class="token function">captureException</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"something went wrong"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scope<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Transactions"><a href="#Transactions" class="headerlink" title="Transactions"></a>Transactions</h2><ul><li><a href="https://juejin.cn/post/6919856296522989582">https://juejin.cn/post/6919856296522989582</a></li></ul><h2 id="微前端区分项目"><a href="#微前端区分项目" class="headerlink" title="微前端区分项目"></a>微前端区分项目</h2><ul><li><a href="https://juejin.cn/post/7139452175088320520">https://juejin.cn/post/7139452175088320520</a></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><ul><li><p><a href="https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d">https://juejin.cn/post/7148364027817623589?share_token=387017f7-9c88-4765-b069-b5a6aff3c36d</a></p></li><li><p><a href="https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5">https://juejin.cn/post/7151753139052347399?share_token=474df17d-1139-403e-b351-766e3ad65ab5</a></p></li></ul><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><ul><li><a href="https://juejin.cn/post/7143142055294795807">https://juejin.cn/post/7143142055294795807</a></li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/getsentry/sentry-javascript">https://github.com/getsentry/sentry-javascript</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文化建设</title>
      <link href="/blog/2022/09/16/005-wen-hua/"/>
      <url>/blog/2022/09/16/005-wen-hua/</url>
      
        <content type="html"><![CDATA[<h3 id="公司文化："><a href="#公司文化：" class="headerlink" title="公司文化："></a>公司文化：</h3><ol><li>Open minded and cooperative - 开放合作，虚心自省</li><li>Simple and direct communication - 不甩锅，不抱怨</li><li>Always seek for truth - 基于事实，追求真理</li><li>Always keep learning, stay humble - 保持学习，保持敬畏</li><li>Mars view - Global team - 火星视角</li></ol><h3 id="团队文化"><a href="#团队文化" class="headerlink" title="团队文化"></a>团队文化</h3><ul><li>自驱协作；</li><li>学习进取；</li><li>积极主动；</li><li>承担责任；</li><li>成就他人；</li><li>往前一步，站在对方立场思考问题；</li><li>拥抱变化、勇于挑战、打破边界（能力、认知），有全局意识！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 文化建设 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文化建设 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续数组test1</title>
      <link href="/blog/2022/09/16/006-lian-xu-shu-zu/"/>
      <url>/blog/2022/09/16/006-lian-xu-shu-zu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><blockquote><p>给定一个二进制数组 nums , 找到含有相同数量的 0 和 1 的最长连续子数组，并返回该子数组的长度。</p><p>示例 1:</p><p>输入: nums = [0,1]</p><p>输出: 2</p><p>说明: [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</p><p>示例 2:</p><p>输入: nums = [0,1,0]</p><p>输出: 2</p><p>说明: [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p><p>var findMaxLength = function(nums) {</p><p>// TODO</p><p>};</p></blockquote><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>// 前缀和+哈希表<br>// 由于「0 和 1 的数量相同」等价于「1 的数量减去 0 的数量等于 0」，我们可以将数组中的 0 视作 −1，则原问题转换成「求最长的连续子数组，其元素和为 0」。</p><p>// 由于哈希表存储的是 counter 的每个取值第一次出现的下标，因此当遇到重复的前缀和时，根据当前下标和哈希表中存储的下标计算得到的子数组长度是以当前下标结尾的子数组中满足有相同数量的 0 和 1 的最长子数组的长度。遍历结束时，即可得到 nums 中的有相同数量的 0 和 1 的最长子数组的长度。</p></blockquote><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">findMaxLength</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> maxLength <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">////存储newNums的前缀和即可</span>  map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//合为key，索引为value,初始化索引为-1，和为0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      counter<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> i <span class="token operator">-</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>counter<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> maxLength<span class="token punctuation">&#125;</span><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxLength</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">findMaxLength</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件下载</title>
      <link href="/blog/2022/08/17/015-ruan-jian-an-zhuang/"/>
      <url>/blog/2022/08/17/015-ruan-jian-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本之家"><a href="#脚本之家" class="headerlink" title="脚本之家"></a>脚本之家</h2><p><a href="https://www.jb51.net/">脚本之家</a></p><h3 id="Navicat-Premium15"><a href="#Navicat-Premium15" class="headerlink" title="Navicat Premium15"></a><code>Navicat Premium</code>15</h3><p><a href="https://www.jb51.net/article/199525.htm"><code>Navicat Premium15</code>安装及破解教程详解亲测有效(附破解失败解决方案)</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 工具使用</title>
      <link href="/blog/2022/08/17/022-node/"/>
      <url>/blog/2022/08/17/022-node/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm-安装和使用"><a href="#nvm-安装和使用" class="headerlink" title="nvm 安装和使用"></a>nvm 安装和使用</h2><ul><li><a href="http://nvm.uihtm.com/">nvm 一个 nodejs 版本管理工具！</a></li><li><a href="https://nodejs.org/en/">node 官网</a></li><li><a href="https://blog.csdn.net/QWERTYQ16/article/details/124497532">nvm 的简介、安装、使用（简单明了）</a></li><li><a href="https://github.com/coreybutler/nvm-windows/issues/145">安装后，每个命令都失败并显示消息“C:\Users%username%\AppData\Roaming\nvm 找不到或不存在。退出。”</a></li></ul><blockquote><p>常用命令</p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 显示可下载版本的部分列表</span>$ nvm list available<span class="token comment"># 安装最新版本 ( 安装时可以在上面看到 node.js 、 npm 相应的版本号 ，不建议安装最新版本)</span>$ nvm install latest<span class="token comment"># 安装指定的版本的nodejs</span>$ nvm install 版本号<span class="token comment"># 查看目前已经安装的版本 （ 当前版本号前面没有 * ， 此时还没有使用任何一个版本，这时使用 node.js 时会报错 ）</span>$ nvm list或 $ nvm ls<span class="token comment"># 使用指定版本的nodejs （ 这时会发现在启用的 node 版本前面有 * 标记，这时就可以使用 node.js ）</span>$ nvm use 版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="nvm-常见问题"><a href="#nvm-常见问题" class="headerlink" title="nvm 常见问题"></a>nvm 常见问题</h3><p><strong>查看 nvm 路径</strong> <code>nvm root</code></p><blockquote><p>如果下载 node 过慢，请更换国内镜像源, 在 nvm 的安装路径下，找到 settings.txt，设置 node_mirro 与 npm_mirror 为国内镜像地址。下载就飞快了~~</p></blockquote><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">root<span class="token operator">:</span> D<span class="token operator">:</span>\nvmpath<span class="token operator">:</span> D<span class="token operator">:</span>\nodejsnode_mirror<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>node<span class="token operator">/</span>npm_mirror<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token operator">/</span>mirrors<span class="token operator">/</span>npm<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>umi4升级</title>
      <link href="/blog/2022/08/09/016-sheng-ji-umi4/"/>
      <url>/blog/2022/08/09/016-sheng-ji-umi4/</url>
      
        <content type="html"><![CDATA[<p> 工程已经升级到了 umi4（需要安装pnpm, 然后 pnpm install），下面罗列了一些变动须知：</p><h3 id="1、关于包管理器"><a href="#1、关于包管理器" class="headerlink" title="1、关于包管理器"></a>1、关于包管理器</h3><ol><li>换成了 pnpm  <a href="https://juejin.cn/post/7077918263954374670">理由</a></li><li> 和 npm 使用方式一致</li></ol><h3 id="2、关于-umijs-max"><a href="#2、关于-umijs-max" class="headerlink" title="2、关于 @umijs/max"></a>2、关于 @umijs/max</h3><ol><li>umi 和 @umijs/max 都是 umi，只不过 @umijs/max 带业务需要的插件，所以需要使用 @umijs/max</li></ol><h3 id="3、关于路由"><a href="#3、关于路由" class="headerlink" title="3、关于路由"></a>3、关于路由</h3><ol><li>路由从 react-router-dom@5 升级到了 react-router-dom@6  <a href="https://reactrouter.com/docs/en/v6">链接</a></li></ol><h3 id="4、关于-history-和-pathname-链接"><a href="#4、关于-history-和-pathname-链接" class="headerlink" title="4、关于 history 和 pathname  链接"></a>4、关于 history 和 pathname  <a href="https://umijs.org/docs/api/api#history">链接</a></h3><ol><li>umi 中的 history 是静态的，所以获取到的参数有问题。</li><li>pathname/search/hash 通过 window 来取值</li><li>采用 const navigate = useNavigate();  <a href="https://umijs.org/docs/api/api#usenavigate">链接</a></li></ol><h3 id="5、关于-query-参数（search）"><a href="#5、关于-query-参数（search）" class="headerlink" title="5、关于 query 参数（search）"></a>5、关于 query 参数（search）</h3><ol><li>const params = useParams();  <a href="https://umijs.org/docs/api/api#useparams">链接</a></li><li>createSearchParams(location.search)  <a href="https://umijs.org/docs/api/api#createsearchparams">链接</a></li></ol><p><strong>UmiJS 的文档，除了「开发一个 Blog」不看，剩下的都需要过一遍  <a href="https://umijs.org/docs/tutorials/getting-started">链接</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> umi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 004</title>
      <link href="/blog/2022/08/08/004weekly/"/>
      <url>/blog/2022/08/08/004weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="七夕到了，还不快给你女朋友做一个专属-chrome-插件"><a href="#七夕到了，还不快给你女朋友做一个专属-chrome-插件" class="headerlink" title="七夕到了，还不快给你女朋友做一个专属 chrome 插件"></a><a href="https://juejin.cn/post/7122332008252080142">七夕到了，还不快给你女朋友做一个专属 chrome 插件</a></h3><p>七夕节马上就要到了，作为拥有对象（没有的话，可以选择 new 一个出来）的程序员来说，肯定是需要有一点表示才行的。用钱能买到的东西不一定能表达咱们的心意，但是用心去写的代码，还能让对象每天看到那才是最正确的选择。</p><p>除了手机之外，在电脑上使用浏览器搜索想要的东西是最常用的功能了，所以就需要一个打开即用的搜索框，而且还能表达心意的 chrome 标签页来让 TA 随时可用。</p><h3 id="写给前端的跨平台方案、跨端引擎的本质"><a href="#写给前端的跨平台方案、跨端引擎的本质" class="headerlink" title="写给前端的跨平台方案、跨端引擎的本质"></a><a href="https://juejin.cn/post/6966626823912308772">写给前端的跨平台方案、跨端引擎的本质</a></h3><p>近些年来，前端领域的跨端技术越来越多了：react native、weex、flutter、electron、kraken 等等。那么多跨端方案，他们有没有通用的思路？我们能不能从这么多方案中找出本质的原理？</p><p>本文会尝试探究探究以下问题：<br>什么是跨平台<br>有哪些方案是跨平台的<br>跨端和跨平台的区别是什么<br>前端领域有哪些跨端方案<br>跨平台、跨端的通用原理是什么</p><p>本文主要讲述了跨平台的概念、方案、优缺点，以及前端跨端的常见方案和原理，通过这篇文章可以理解跨端和跨平台容器的思路</p><h3 id="lerna-中文教程"><a href="#lerna-中文教程" class="headerlink" title="lerna 中文教程"></a><a href="https://juejin.cn/post/6844903856153821198?share_token=52703fb9-a8a2-4301-956a-31bb3fb19b43">lerna 中文教程</a></h3><p>Lerna 是一个工具，它优化了使用 git 和 npm 管理多包存储库的工作流。本文讲解了工作的两种模式：Fixed/Locked mode (default)和 Independent mode；yarn 的 workspaces 模式；以及各种命令</p><p>让我们简单了解一下如何使用 lerna 来管理一个多包，以及 lerna 的主要配置和命令。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h3 id="牛逼，一款-996-代码分析工具"><a href="#牛逼，一款-996-代码分析工具" class="headerlink" title="牛逼，一款 996 代码分析工具"></a><a href="https://mp.weixin.qq.com/s?__biz=MzA3MzE4ODY0Mg==&mid=2455993889&idx=1&sn=7233d57b655d882a3e73386abba5e8ac&chksm=88850a6cbff2837a0eee062726b62415836b92c0ee5527a6c8a72993f255fa6bc1095600a5dd#rd">牛逼，一款 996 代码分析工具</a></h3><p>一个代码分析工具 code996，它可以统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度。这算是一种对项目更了解的方式，杜绝 996 从了解数据开始。</p><p>code996 除了能够分析项目的实际工作强度，也能用来分析我们代码编写的情况，对自身了解自己代码编写效率的时段、最近的工作强度等都是非常好的一个输入</p><h3 id="如何优雅地在-React-中使用-TypeScript，看这一篇就够了！"><a href="#如何优雅地在-React-中使用-TypeScript，看这一篇就够了！" class="headerlink" title="如何优雅地在 React 中使用 TypeScript，看这一篇就够了！"></a><a href="https://juejin.cn/post/7021674818621669389">如何优雅地在 React 中使用 TypeScript，看这一篇就够了！</a></h3><p>本文讲解了 ypeScript 与 React 一起使用时经常遇到的一些类型定义的问题。阅读本文前，希望你能有一定的 React 和 TypeScript 基础。</p><p>你平时如何使用 ts, 鼠标点击事件对象类型是什么? 是不是用的最多的是 any 类型,最后 typescript 用成了 anyscript,typescript 也就失去了它存在的意义,本文将为你讲解如何在 react 中优雅的使用 typescript</p><h3 id="React-State-Hooks-useReducer-useState-useContext"><a href="#React-State-Hooks-useReducer-useState-useContext" class="headerlink" title="React State Hooks: useReducer, useState, useContext"></a><a href="https://www.robinwieruch.de/react-state-usereducer-usestate-usecontext/">React State Hooks: useReducer, useState, useContext</a></h3><p>作为 react 初学者，第一次弄懂了 useReducer, useState, useContext 的用法，在什么时候用，以及三者之间的区别。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 003</title>
      <link href="/blog/2022/08/01/003weekly/"/>
      <url>/blog/2022/08/01/003weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备"><a href="#成为优秀的-TS-体操高手-之-TS-类型体操前置知识储备" class="headerlink" title="成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备"></a><a href="https://mp.weixin.qq.com/s/AOzZVxftMYEOfvhSFMV_fQ">成为优秀的 TS 体操高手 之 TS 类型体操前置知识储备</a></h3><p>TS 类型体操前置知识储备大概就介绍了 extends,infer,typeof,keyof 和 in,数组的使用,as 关键字</p><p>了解了这部分关键字作用之后，完成 TS 体操练习的中等难度的题目不在话下！（起码完成 80%的题目没得问题），剩下的 20% 还需要学习更多的 TS 体操技巧</p><h3 id="尤雨溪主题演讲《2022-前端生态趋势》全记录"><a href="#尤雨溪主题演讲《2022-前端生态趋势》全记录" class="headerlink" title="尤雨溪主题演讲《2022 前端生态趋势》全记录"></a><a href="https://juejin.cn/post/7123126028838862862">尤雨溪主题演讲《2022 前端生态趋势》全记录</a></h3><p>本文是<a href="https://conf.juejin.cn/xdc2022">第二届稀土开发者大会</a> 尤大关于 《2022 Web 前端生态趋势》 的主题分享整理。</p><p>React Hooks 的推出启发了很多组件逻辑表达和逻辑附用的新范式；但是同时提到了 React Hooks 对开发者存在的心智负担问题；而类 Vue3 的基于依赖追踪的范式重新得到了重视；基于编译的响应式系统和基于编译的运行时优化才是未来。</p><p>rust、go、zig 和 JavaScript 的混合工具链会成为前端构建工具的未来。</p><p>有时间的同学可以看看<a href="https://juejin.cn/live/xdc202201">回放</a></p><p>了解 2022 前端生态趋势；关注未来，适当的调整自己的学习路线、知识体系</p><h3 id="type-与-interface-的区别，你真的懂了吗？"><a href="#type-与-interface-的区别，你真的懂了吗？" class="headerlink" title="type 与 interface 的区别，你真的懂了吗？"></a><a href="https://mp.weixin.qq.com/s/mOB95li-tuaswWliGiYZyw">type 与 interface 的区别，你真的懂了吗？</a></h3><p>在写 ts 相关代码的过程中，总能看到 interface 和 type 的身影。它们的作用好像都一样的，相同的功能用哪一个都可以实现，也都很好用，所以也很少去真正的理解它们之间到底有啥区别， 分别在什么场景下使用，本文作者将带领大家一起探索 TS 中的 interface 和 type。</p><p>interface 和 type 之间的差异不仅仅是次要语法声明。那么，今天我们就来看看这两家伙之间存在啥不可告人的秘密。</p><h3 id="深入理解-Typescript-系列-泛型"><a href="#深入理解-Typescript-系列-泛型" class="headerlink" title="深入理解 Typescript 系列-泛型"></a><a href="https://juejin.cn/post/6996479857559339038">深入理解 Typescript 系列-泛型</a></h3><p>在日常开发中，时长会考虑到方法的复用性，毕竟对于相似的场景拷贝一份代码既增加了代码量还增加了额外的维护成本，要是重构的时候忘了，还会导致不可描述的 bug。</p><p>提高方法的复用性，减少代码维护成本。</p><h3 id="Git-基础教程-必学"><a href="#Git-基础教程-必学" class="headerlink" title="Git 基础教程(必学)"></a><a href="https://mp.weixin.qq.com/s/0mGBRiG-kOa9rNL3qn9vVQ">Git 基础教程(必学)</a></h3><p>在工作中，发现不少同学对 Git 的掌握非常基础，同样作为版本控制系统，使用好 Git 比 SVN 要更有挑战，需要对 Git 有一定的了解，才能在工作中，驾驭好 Git。</p><p>本文从最简单的基础入门，讲解工作中常用的 Git 基础，掌握这些是 Git 进阶的基础，足够日常工作场景。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 002</title>
      <link href="/blog/2022/07/25/002weekly/"/>
      <url>/blog/2022/07/25/002weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="函数式组件与类组件有何不同？"><a href="#函数式组件与类组件有何不同？" class="headerlink" title="函数式组件与类组件有何不同？"></a><a href="https://juejin.cn/post/7100874690884796447">函数式组件与类组件有何不同？</a></h3><p>详细介绍了函数组件与类组件里 props 的用法，详细介绍了函数组件在一次特定的渲染中捕获那一次渲染所用的 props 或者 state，他们总是会保持一致。在类组件中如果对 this.props 直接引用容易给自己埋坑。</p><p>当我们用函数来编写大部分的 React 代码时，我们需要调整关于优化代码和什么变量会随着时间改变的认知与直觉。</p><h3 id="一行-CSS-代码搞定响应式布局"><a href="#一行-CSS-代码搞定响应式布局" class="headerlink" title="一行 CSS 代码搞定响应式布局"></a><a href="https://mp.weixin.qq.com/s/tGm77W7t2fbLTNNxwlo_EQ">一行 CSS 代码搞定响应式布局</a></h3><p>在这篇文章中，我将教你如何使用 CSS Grid 来创建一个超酷的图像网格图，它将根据屏幕的宽度来改变列的数量。最精彩的地方在于：所有的响应特性被添加到了一行 css 代码中。这意味着我们不必将 HTML 与丑陋的类名(如 col-sm-4, col-md-8)混杂在一起，也不必为每个屏幕创建媒体查询。</p><h3 id="高性能深拷贝"><a href="#高性能深拷贝" class="headerlink" title="高性能深拷贝"></a><a href="https://juejin.cn/post/7122034570043588622">高性能深拷贝</a></h3><p>“说一下深拷贝的实现方式”, 答: “JSON.parse(JSON.stringify())、lodash 的 cloneDeep, 递归遍历…”, 相信我们大多数人在面试的过程中被问到过这个问题, 你是怎么回答的? 递归是不是你的最优解? 本文将为你介绍一种更高性能的深拷贝, 相信学完本文, 你一定能够打动面试官, 让你更轻松的斩获 offer</p><h3 id="前端如何学习更有计划性、提升更稳更快？"><a href="#前端如何学习更有计划性、提升更稳更快？" class="headerlink" title="前端如何学习更有计划性、提升更稳更快？"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI2MjYzMjYwNg==&mid=2247487730&idx=1&sn=4dadced98833aa8b2f04747359dc484f&chksm=ea497503dd3efc153bd9feca2b1db4967a8ac9866335de8a8979568faeeb0ea45849367c9b68#rd">前端如何学习更有计划性、提升更稳更快？</a></h3><p>我们学习是为了自己，是为了真正的解决问题，切忌“假装学习”。虽然系统学习看起来很不错，但从自己的兴趣和工作出发，是更好的学习方向。在具体的学习中，应强调输出，以教为学，每一个困难的地方都是超车的机会，以慢为快，踏实的打牢基础知识点。</p><p>学习是一个系统，我们不能总是依赖意志力，要讲究方法、技巧、环境等，引导自己做事的兴趣、热情和成就感，这样你才会越做越起劲，最后不断地运转下去。</p><ul><li>以教促学</li><li>困难的地方就是你弯道超车的地方</li><li>以慢为快</li><li>坚定的信念</li><li>学习的“反人性”问题</li><li>即时反馈</li><li>合适的环境和氛围</li></ul><h3 id="es2022-新特性提前了解"><a href="#es2022-新特性提前了解" class="headerlink" title="es2022 新特性提前了解"></a><a href="https://juejin.cn/post/7073285958791069704">es2022 新特性提前了解</a></h3><p>新版本的 ECMA Script 将在今年六月成为标准。本文带我们看 ES2022 有什么新特性。</p><p>许多人期待 ES2022（ES13） 会带来哪些新的特性。这篇文章讲解了 es2022 新增的几个特性，一目了然，跟以前的用法有的有些不同，但是用起来更方便了。</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weekly 001111</title>
      <link href="/blog/2022/07/18/001weekly/"/>
      <url>/blog/2022/07/18/001weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本期文章"><a href="#本期文章" class="headerlink" title="本期文章"></a>本期文章</h2><h3 id="关于代码评审-CodeReview-那些不得不说的事儿"><a href="#关于代码评审-CodeReview-那些不得不说的事儿" class="headerlink" title="关于代码评审(CodeReview)那些不得不说的事儿"></a><a href="https://juejin.cn/post/7100874690884796447">关于代码评审(CodeReview)那些不得不说的事儿</a></h3><p>本文作者在学习了<a href="https://eng-practices-cn.xindoo.xyz/review/index">Google Code Review 指南</a>的基础上；总结了长期做 CodeReview 的好处：提声代码质量、提前发现问题、经验和知识的传递；CodeReview 的关注点：功能性、复杂性、代码风格、文档&amp;注释、代码亮点；还指出了 CodeReview 应该及时；以及注意的礼节，reviewer 写得好的地方也应该点赞；</p><p>本文还指导大家如何才能写出对 CodeReview 友好的代码：提交前先做好自审、写清楚变更描述、单个变更竟可能短；</p><p>关于 CodeReview 的误区该文也做了合理的反驳，例如 CodeReview 是纯浪费时间？工期很紧没时间去做 CodeReivew;只有高级工程师才有资格 Reivewe 别人的代码？都有测试流程了，为什么还要做 CodeReview？有了 CodeReview 就不需要测试了？只要我在团队推行了 CodeReview 流程，代码质量就会迅速提高？</p><h3 id="详解-js-继承的那些事儿"><a href="#详解-js-继承的那些事儿" class="headerlink" title="详解 js 继承的那些事儿"></a><a href="https://blog.csdn.net/qq_34574204/article/details/120716964">详解 js 继承的那些事儿</a></h3><p>本文作者带你学习 js 的继承，原型，原型链的底层知识和原理；你会了解到以下知识什么是继承；为什么要有继承；继承的相关 6 种实现方式及优缺点。</p><h3 id="贪吃蛇小游戏开发思路分享"><a href="#贪吃蛇小游戏开发思路分享" class="headerlink" title="贪吃蛇小游戏开发思路分享"></a><a href="https://juejin.cn/post/7051411538577457183">贪吃蛇小游戏开发思路分享</a></h3><p>如何用数组表示游戏地图，数组的周边嗅探，数组边界检测；还有碰撞检测。看完之后，抖音最火的游戏吃掉那个苹果就可以自己写了。</p><h3 id="TypeScript-泛型中的-K、T、V-等到底是个啥？"><a href="#TypeScript-泛型中的-K、T、V-等到底是个啥？" class="headerlink" title="TypeScript 泛型中的 K、T、V 等到底是个啥？"></a><a href="https://juejin.cn/post/7084410879223005215">TypeScript 泛型中的 K、T、V 等到底是个啥？</a></h3><p>当你首次看到 TypeScript 泛型中的 T 会感到陌生么？<br>那么 T 是什么意思呢？图中的泛型变量 T 表示 Type，实际上 T 可以用任何有效的名称代替。除了 T 之外，常见的泛型变量还有 K、V 和 E 等。</p><ul><li>K 全称 Key 表示对象中键的类型；</li><li>V 全称 Value 表示对象中值的类型；</li><li>E 全称 Element 表示元素类型。</li></ul><h3 id="45-个-GIT-经典操作场景，专治不会合代码"><a href="#45-个-GIT-经典操作场景，专治不会合代码" class="headerlink" title="45 个 GIT 经典操作场景，专治不会合代码"></a><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></h3><p>本文作者整理了 45 个日常用 git 合代码的经典操作场景，基本覆盖了工作中的需求。</p><ul><li>读完本篇文章你会了解到以下知识：</li><li>提交（Committing） 处理，如：commit message 写错了，删除任意 commit 等等；</li><li>暂存（Staging）处理，如：我需要把暂存的内容添加到上一次的提交（commit）等等；</li><li>分支（branches）处理：如：我想提交到一个新分支，但错误提交到了 main 等等;</li><li>变基（Rebasing）和合并（Merging）处理，如：撤销 rebase/merge，有冲突的情况等待。</li></ul><h3 id="Vite-3-0-发布，下一代的前端工具链"><a href="#Vite-3-0-发布，下一代的前端工具链" class="headerlink" title="Vite 3.0 发布，下一代的前端工具链"></a><a href="https://www.oschina.net/news/202953/vite-3-0-released">Vite 3.0 发布，下一代的前端工具链</a></h3><p>Vite 3.0 现已于 2022 年 7 月 15 正式发布；Vite3.0 新特性一览；之后 vite 准备每年会发一个大版本。</p><h3 id="他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！"><a href="#他来了！性能吊打-Node-js-和-Deno-的新一代-javaScript-运行时！" class="headerlink" title="他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！"></a><a href="https://mp.weixin.qq.com/s?__biz=Mzg5NDEyMzA2NQ==&mid=2247488883&idx=1&sn=1ec39e6e52849ea2deb2dbbed26cc2df&chksm=c0253825f752b13303aa204bdfa93eb5979999cf5c61224726673f552ab5406ce9a506a6e7b5#rd">他来了！性能吊打 Node.js 和 Deno 的新一代 javaScript 运行时！</a></h3><p>刚开源不到一个月就获得了 19.5k star！看起来马上就会成为 Node.js 和 Deno 的一大竞争对手了！</p><p>和传统的 Node.js 这种传统的 javaScript 运行时不同，Bun.js 直接内置了打包器、转译器、任务运行器和 npm 客户端，这意味着你不再需要 Webpack/Rollup/esbuild/Snowpack/Parcel/Rome/swc/babel 就可以直接运行 TypeScript、JSX！</p><p>另外，Bun.js 原生支持了数百个 Node.js 和 Web API，包括约 90% 的 Node-API 函数(fs、path、Buffer 等)。</p><p>Bun.js 的目标是可以在浏览器之外的其他地方运行世界上大多数 JavaScript，为你未来的基础架构带来性能和复杂性的增强，并通过更好、更简单的工具提高开发者的生产力！</p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><ul><li><a href="https://github.com/aliyunfe/weekly">阿里云 TXD 前端周刊</a></li><li><a href="https://github.com/ascoders/weekly">前端精度周刊</a></li><li><a href="">o2team/tech-weekly</a></li><li><a href="https://github.com/tnfe/TNT-Weekly/">tnfe/TNT-Weekly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.prototype.hasOwnProperty()和 Object.hasOwn()</title>
      <link href="/blog/2022/07/09/023-object-prototype-hasownproperty-andobject-hasown/"/>
      <url>/blog/2022/07/09/023-object-prototype-hasownproperty-andobject-hasown/</url>
      
        <content type="html"><![CDATA[<h1 id="Object-prototype-hasOwnProperty-和-Object-hasOwn"><a href="#Object-prototype-hasOwnProperty-和-Object-hasOwn" class="headerlink" title="Object.prototype.hasOwnProperty()和 Object.hasOwn()"></a>Object.prototype.hasOwnProperty()和 Object.hasOwn()</h1><h3 id="Object-prototype-hasOwnProperty"><a href="#Object-prototype-hasOwnProperty" class="headerlink" title="Object.prototype.hasOwnProperty()"></a><code>Object.prototype.hasOwnProperty()</code></h3><p><code>hasOwnProperty()</code> 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性（也就是，是否有指定的键）。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>object1<span class="token punctuation">.</span>property1 <span class="token operator">=</span> <span class="token number">42</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"property1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object1<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Object-hasOwn"><a href="#Object-hasOwn" class="headerlink" title="Object.hasOwn()"></a><code>Object.hasOwn()</code></h3><blockquote><p><strong>注意：</strong> <code>Object.hasOwn()</code>旨在替代<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty"><code>Object.hasOwnProperty()</code></a>.</p></blockquote><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><code>hasOwn(instance, prop)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> object1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">"exists"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>object1<span class="token punctuation">,</span> <span class="token string">"undeclaredPropertyValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// expected output: false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hasOwn和-in-的区别"><a href="#hasOwn和-in-的区别" class="headerlink" title="hasOwn和 in 的区别"></a><code>hasOwn</code>和 in 的区别</h4><blockquote><p>以下示例区分直接属性和通过原型链继承的属性：</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> example <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>example<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">"exists"</span><span class="token comment">// `hasOwn` will only return true for direct properties:</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"prop"</span><span class="token punctuation">)</span> <span class="token comment">// returns true</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"toString"</span><span class="token punctuation">)</span> <span class="token comment">// returns false</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>example<span class="token punctuation">,</span> <span class="token string">"hasOwnProperty"</span><span class="token punctuation">)</span> <span class="token comment">// returns false</span><span class="token comment">// The `in` operator will return true for direct or inherited properties:</span><span class="token string">"prop"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span class="token string">"toString"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span class="token string">"hasOwnProperty"</span> <span class="token keyword">in</span> example <span class="token comment">// returns true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hasOwnProperty-存在的问题"><a href="#hasOwnProperty-存在的问题" class="headerlink" title="hasOwnProperty 存在的问题"></a><code>hasOwnProperty</code> 存在的问题</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token string">'exists'</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">hasOwn</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true - 与该对象怎么创建的没关系</span><span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'prop'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//  TypeError: foo.hasOwnProperty is not a function</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create"><code>Object.create(null)</code></a>. 这些不继承自<code>Object.prototype</code>，因此<code>hasOwnProperty()</code>无法访问。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for...of循环和for...in循环区别</title>
      <link href="/blog/2022/07/09/020-for-of-xun-huan-he-for-in-xun-huan-qu-bie/"/>
      <url>/blog/2022/07/09/020-for-of-xun-huan-he-for-in-xun-huan-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="for…of-循环和-for…in-循环区别"><a href="#for…of-循环和-for…in-循环区别" class="headerlink" title="for…of 循环和 for…in 循环区别"></a>for…of 循环和 for…in 循环区别</h1><h3 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个数据结构只要部署了<code>Symbol.iterator</code>属性，就被视为具有 iterator 接口，就可以用<code>for...of</code>循环遍历它的成员。也就是说，<code>for...of</code>循环内部调用的是数据结构的<code>Symbol.iterator</code>方法。</p><p><code>for...of</code>循环可以使用的范围包括数组、Set 和 Map 结构、某些类似数组的对象（比如<code>arguments</code>对象、<code>DOM NodeList</code> 对象、Generator 对象，以及字符串。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// 原型链上  Symbol(Symbol.iterator): ƒ values()</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p><code>for...of</code>循环调用遍历器接口，数组的遍历器接口只返回具有数字索引的属性。这一点跟<code>for...in</code>循环也不一样。</p><pre class="line-numbers language-none"><code class="language-none">let arr &#x3D; [3, 5, 7];arr.foo &#x3D; &#39;hello&#39;;for (let i in arr) &#123;  console.log(i); &#x2F;&#x2F; &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;&#125;for (let i of arr) &#123;  console.log(i); &#x2F;&#x2F;  &quot;3&quot;, &quot;5&quot;, &quot;7&quot;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for…in-循环"><a href="#for…in-循环" class="headerlink" title="for…in 循环"></a>for…in 循环</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><code>for...in</code> 语句以任意顺序迭代对象的可枚举属性，会遍历手动添加的其他键，甚至包括原型链上的键，只能获得对象的键名，不能直接获取键，为遍历对象而设计。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">objCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">arrCustom</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span>iterable<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// "0"、"1"、"2", "foo", "arrCustom", "objCustom"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>for...in</code>循环有几个缺点。</p><ul><li>数组的键名是数字，但是<code>for...in</code>循环是以字符串作为键名“0”、“1”、“2”等等。</li><li><code>for...in</code>循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键。</li><li>某些情况下，<code>for...in</code>循环会以任意顺序遍历键名。</li></ul><p>总之，<code>for...in</code>循环主要是为遍历对象而设计的，不适用于遍历数组。</p><p><code>for...of</code>循环相比上面几种做法，有一些显著的优点。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> value <span class="token keyword">of</span> myArray<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>有着同<code>for...in</code>一样的简洁语法，但是没有<code>for...in</code>那些缺点。</li><li>不同于<code>forEach</code>方法，它可以与<code>break</code>、<code>continue</code>和<code>return</code>配合使用。</li><li>提供了遍历所有数据结构的统一操作接口。</li></ul><p>下面是一个使用 break 语句，跳出<code>for...of</code>循环的例子。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> n <span class="token keyword">of</span> fibonacci<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">break</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子，会输出斐波纳契数列小于等于 1000 的项。如果当前项大于 1000，就会使用<code>break</code>语句跳出<code>for...of</code>循环。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git常见命令使用</title>
      <link href="/blog/2022/07/09/021-git/"/>
      <url>/blog/2022/07/09/021-git/</url>
      
        <content type="html"><![CDATA[<h1 id="git-常见命令使用"><a href="#git-常见命令使用" class="headerlink" title="git 常见命令使用"></a>git 常见命令使用</h1><h2 id="git-仓库初始化"><a href="#git-仓库初始化" class="headerlink" title="git 仓库初始化"></a>git 仓库初始化</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">echo <span class="token string">"# test"</span> <span class="token operator">>></span> <span class="token constant">README</span><span class="token punctuation">.</span>mdgit initgit add <span class="token constant">README</span><span class="token punctuation">.</span>mdgit commit <span class="token operator">-</span>m <span class="token string">"first commit"</span>git branch <span class="token operator">-</span><span class="token constant">M</span> maingit remote add origin git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>xxx<span class="token punctuation">.</span>gitgit push <span class="token operator">-</span>u origin main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><code>git reset</code>命令用于将当前分支指向另一个位置。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 将当期分支的指针倒退三个 commit，</span><span class="token comment"># 并且会改变暂存区</span>$ git reset HEAD~3<span class="token comment"># 倒退指针的同时，不改变暂存区</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft HEAD~3<span class="token comment"># 倒退指针的同时，改变工作区</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定回滚的位置，那么等同于撤销修改。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 撤销上一次向暂存区添加的所有文件</span>$ git reset<span class="token comment"># 无任何效果</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft<span class="token comment"># 同时撤销暂存区和工作区的修改，</span><span class="token comment"># 回复到上一次提交的状态</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard<span class="token comment"># 撤销上一次向暂存区添加的某个指定文件，</span><span class="token comment"># 不影响工作区中的该文件</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span> &lt;filename<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>soft: 不改变工作区和缓存区，只移动 HEAD 到指定 commit。</li><li>mixed: 只改变缓存区，不改变工作区。这是默认参数，通常用于撤销<code>git add</code>。</li><li>hard：改变工作区和暂存区到指定 commit。该参数等同于重置，可能会引起数据损失。<code>git reset --hard</code>等同于<code>git reset --hard HEAD</code>。</li><li><code>-p</code>表示键入交互模式，指定暂存区的哪些部分需要撤销。</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Undo add</span>$ git reset<span class="token comment"># Undo a commit，不重置工作区和缓存区</span><span class="token comment"># 回到 HEAD 之前的那个 commit</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>soft HEAD^<span class="token comment"># Undo a commit，重置工作区和缓存区</span><span class="token comment"># 连续撤销三个 commit：HEAD, HEAD^, and HEAD~2</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span>hard HEAD~3<span class="token comment"># 从暂存区移除指定文件，但不改变工作区中的该文件</span>$ git reset <span class="token punctuation">-</span><span class="token punctuation">-</span> frotz.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ahooks学习</title>
      <link href="/blog/2022/06/01/019-ahooks/"/>
      <url>/blog/2022/06/01/019-ahooks/</url>
      
        <content type="html"><![CDATA[<h2 id="aHooks"><a href="#aHooks" class="headerlink" title="aHooks"></a>aHooks</h2><h3 id="useRequest"><a href="#useRequest" class="headerlink" title="useRequest"></a>useRequest</h3><ul><li><p>公司</p><ul><li><p>组建内</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> xxx <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@/services/xxx"</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> xxx<span class="token punctuation">,</span>  error<span class="token punctuation">,</span>  loading<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">APIxxx</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> merchantId <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>@/services/xxx</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> request <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"umi"</span><span class="token comment">// 判断是否创建过loyalty</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">APIxxx</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">params</span><span class="token operator">:</span> xxx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/xxx/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    params<span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代理位置/config/proxy</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">'/api-xxx/'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'http://xxx'</span><span class="token punctuation">,</span>          <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token literal-property property">pathRewrite</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">'^/api-xxx/'</span><span class="token operator">:</span> <span class="token string">'/'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>默认用法/自动触发</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">"mockjs"</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">function</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">"@name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> error<span class="token punctuation">,</span> loading <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">failed to load</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>loading<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">loading...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">Username: </span><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>手动触发<ul><li>run</li><li>runAsync</li></ul></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> runAsync <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> <span class="token function">runAsync</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>state<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生命周期<ul><li><code>onBefore</code>：请求之前触发</li><li><code>onSuccess</code>：请求成功触发</li><li><code>onError</code>：请求失败触发</li><li><code>onFinally</code>：请求完成触发</li></ul></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">function</span> <span class="token function">editUsername</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">username</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Failed to modify username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> run <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">onBefore</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Start Request: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>      message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">onFinally</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> result<span class="token punctuation">,</span> error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Request finish</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>loading<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">run</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token punctuation">&#123;</span>loading <span class="token operator">?</span> <span class="token string">"Loading"</span> <span class="token operator">:</span> <span class="token string">"Edit"</span><span class="token punctuation">&#125;</span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>刷新重复请求</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> run<span class="token punctuation">,</span> refresh <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">id</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getUsername</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>refresh<span class="token punctuation">&#125;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">  Refresh</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>立即变更数据</p></li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> message <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> useState<span class="token punctuation">,</span> useRef <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useRequest <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'ahooks'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Promise<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">'@name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token plain-text">function editUsername(username: string): Promise</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>void</span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token plain-text">export default () => </span><span class="token punctuation">&#123;</span>  <span class="token comment">// store last username</span>  <span class="token keyword">const</span> lastRef <span class="token operator">=</span> useRef<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string</span><span class="token punctuation">></span></span><span class="token plain-text">();  const [state, setState] = useState('');  // get username  const </span><span class="token punctuation">&#123;</span> <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span> mutate <span class="token punctuation">&#125;</span><span class="token plain-text"> = useRequest(getUsername);  // edit username  const </span><span class="token punctuation">&#123;</span> <span class="token literal-property property">run</span><span class="token operator">:</span> edit <span class="token punctuation">&#125;</span><span class="token plain-text"> = useRequest(editUsername, </span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">mutate</span><span class="token punctuation">(</span>lastRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token punctuation">&#125;</span><span class="token plain-text">);  const onChange = () => </span><span class="token punctuation">&#123;</span>    lastRef<span class="token punctuation">.</span>current <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token function">mutate</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">edit</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token plain-text">;  return (    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">Username: </span><span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>state<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Please enter username<span class="token punctuation">"</span></span>        <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">240</span><span class="token punctuation">,</span> <span class="token literal-property property">marginRight</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onChange<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        Edit      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">  );&#125;;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>取消请求</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> loading<span class="token punctuation">,</span> run<span class="token punctuation">,</span> cancel <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>editUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">manual</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">result<span class="token punctuation">,</span> params</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">The username was changed to "</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">" !</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>cancel<span class="token punctuation">&#125;</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">marginLeft</span><span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">  Cancel</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>参数管理</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">data</span><span class="token operator">:</span> username<span class="token punctuation">,</span>  run<span class="token punctuation">,</span>  params<span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUsername<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">defaultParams</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">marginTop</span><span class="token operator">:</span> <span class="token number">8</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">UserId: </span><span class="token punctuation">&#123;</span>params<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h4><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>  loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>  data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span>  error<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">,</span>  params<span class="token operator">:</span> TParams <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">runAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">refreshAsync</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  mutate<span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">?</span><span class="token operator">:</span> TData <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>oldData<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>TData <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span>TData<span class="token punctuation">,</span> TParams<span class="token operator">></span></span></span><span class="token punctuation">(</span>  <span class="token function-variable function">service</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TData<span class="token operator">></span><span class="token punctuation">,</span>  <span class="token punctuation">&#123;</span>    manual<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>    defaultParams<span class="token operator">?</span><span class="token operator">:</span> TParams<span class="token punctuation">,</span>    onBefore<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onSuccess<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> TData<span class="token punctuation">,</span> params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Error<span class="token punctuation">,</span> params<span class="token operator">:</span> TParams<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    onFinally<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>params<span class="token operator">:</span> TParams<span class="token punctuation">,</span> data<span class="token operator">?</span><span class="token operator">:</span> TData<span class="token punctuation">,</span> e<span class="token operator">?</span><span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span><span class="token punctuation">,</span>    loadingDelay<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token comment">//设置 loading 变成 true 的延迟时间</span>    pollingInterval<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//轮询间隔，单位为毫秒。如果值大于 0，则启动轮询模式。通过 cancel 来停止轮询，通过 run/runAsync 来启动轮询。</span>    pollingWhenHidden<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//在页面隐藏时，是否继续轮询。如果设置为 false，在页面隐藏时会暂时停止轮询，页面重新显示时继续上次轮询。</span>    ready<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//当前请求是否准备好了</span>    refreshDeps<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">//依赖数组，当数组内容变化后，发起请求。同 useEffect 的第二个参数。</span>refreshOnWindowFocus<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">boolean</span><span class="token comment">//在屏幕重新获取焦点或重新显示时，重新发起请求booleanfalse</span>focusTimespan<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span>debounceWait<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//防抖</span>    throttleWait<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//节流</span>  retryCount<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">number</span><span class="token comment">//错误重试</span>    cacheKey<span class="token operator">?</span><span class="token builtin">string</span><span class="token comment">//缓存</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useSetState"><a href="#useSetState" class="headerlink" title="useSetState"></a>useSetState</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> useSetState <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"ahooks"</span><span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">hello</span><span class="token operator">:</span> string<span class="token punctuation">;</span>  <span class="token literal-property property">count</span><span class="token operator">:</span> number<span class="token punctuation">;</span>  <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> any<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> setState<span class="token punctuation">]</span> <span class="token operator">=</span>    useSetState <span class="token operator">&lt;</span>    State <span class="token operator">></span>    <span class="token punctuation">&#123;</span>      <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>      <span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">hello</span><span class="token operator">:</span> <span class="token string">"world"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">          set hello        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">"bar"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>          <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">margin</span><span class="token operator">:</span> <span class="token string">"0 8px"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">></span></span><span class="token plain-text">          set foo        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span>          <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">count</span><span class="token operator">:</span> prev<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>        <span class="token punctuation">></span></span><span class="token plain-text">          count + 1        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="useBoolean"><a href="#useBoolean" class="headerlink" title="useBoolean"></a>useBoolean</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="useToggle"><a href="#useToggle" class="headerlink" title="useToggle"></a>useToggle</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//false</span><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> toggle<span class="token punctuation">,</span> set<span class="token punctuation">,</span> setLeft<span class="token punctuation">,</span> setRight <span class="token punctuation">&#125;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useToggle</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="LifeCycle"><a href="#LifeCycle" class="headerlink" title="LifeCycle"></a>LifeCycle</h3><ul><li>useMount(fn: () =&gt; void );</li><li>useUnmount(fn: () =&gt; void);</li><li>useUnmount(fn: () =&gt; void);</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> ahooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优选文章</title>
      <link href="/blog/2022/03/01/024-you-xuan-wen-zhang/"/>
      <url>/blog/2022/03/01/024-you-xuan-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><h3 id="git-使用"><a href="#git-使用" class="headerlink" title="git 使用"></a>git 使用</h3><ul><li><a href="https://www.bookstack.cn/read/git-tutorial/docs-commands-git-reset.md">阮一峰 Git 教程</a></li><li><a href="https://mp.weixin.qq.com/s/2p4m63JdsCjBpVku-WaZyA">45 个 GIT 经典操作场景，专治不会合代码</a></li><li></li></ul><h3 id="ES6-使用"><a href="#ES6-使用" class="headerlink" title="ES6 使用"></a>ES6 使用</h3><ul><li><a href="https://es6.ruanyifeng.com/">ES6 入门教程</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rtd样式</title>
      <link href="/blog/2022/03/01/018-yang-shi/"/>
      <url>/blog/2022/03/01/018-yang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><ul><li><p>m 是 margin 缩写，</p></li><li><p>p 是 padding 缩写，.rtd-p-h-24 -&gt; padding-right: 24px; padding-left: 24px;</p></li><li><p>t r b l 是 top right bottom left 缩写，</p></li><li><p>h 是 horizontal 缩写（margin-right: 24px; margin-left: 24px;）</p></li><li><p>v 是 vertical 缩写（margin-top: 24px; margin-bottom: 24px)</p></li><li><p>n 是 negative（负值，比如 -8px）缩写</p></li></ul><pre class="line-numbers language-css" data-language="css"><code class="language-css">.rtd-p-h-24 -> <span class="token property">padding-right</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span> <span class="token property">padding-left</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>.rtd-m-r-24 -> <span class="token property">margin-right</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span>.rtd-m-t-24 -> <span class="token property">margin-top</span><span class="token punctuation">:</span> 24px<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><script src="https://utteranc.es/client.js"        repo="Gao-Hongxiang/Gao-Hongxiang.github.io"        issue-term="pathname"        theme="github-light"        crossorigin="anonymous"        async></script>]]></content>
      
      
      
        <tags>
            
            <tag> 工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法+手撕</title>
      <link href="/blog/2022/03/01/017-suan-fa-shou-si/"/>
      <url>/blog/2022/03/01/017-suan-fa-shou-si/</url>
      
        <content type="html"><![CDATA[<h2 id="手撕"><a href="#手撕" class="headerlink" title="手撕"></a>手撕</h2><h3 id="节流-防抖"><a href="#节流-防抖" class="headerlink" title="节流-防抖"></a><strong>节流-防抖</strong></h3><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const throttle1 &#x3D; (fn,wait &#x3D; 500) &#x3D;&gt; &#123; &#x2F;&#x2F;必须返回函数否则是函数的直接调用        return function(...args) &#123;  &#x2F;&#x2F; 不能是箭头函数，让this指向该标签，否则this指向windiw          if(!this.timer)&#123;&#x2F;&#x2F;检测是否开启了定时器            this.timer &#x3D;  setTimeout(() &#x3D;&gt; &#123;&#x2F;&#x2F;没有开启则开启新的定时器，必须是箭头函数，否则this指向windiw              fn.apply(this,args) &#x2F;&#x2F;fn必须是普通函数，否则没法改变this指向              this.timer &#x3D; null&#x2F;&#x2F;清除定时器            &#125;,wait)          &#125;        &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JS" data-language="JS"><code class="language-JS">const debounce &#x3D; (func, wait &#x3D; 50) &#x3D;&gt; &#123;  &#x2F;&#x2F; 缓存一个定时器id  &#x2F;&#x2F; 这里返回的函数是每次用户实际调用的防抖函数  &#x2F;&#x2F; 如果已经设定过定时器了就清空上一次的定时器  &#x2F;&#x2F; 开始一个新的定时器，延迟执行用户传入的方法  return function(...args) &#123;    if (this.timer) clearTimeout(timer)    this.timer &#x3D; setTimeout(() &#x3D;&gt; &#123;      func.apply(this, args)    &#125;, wait)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="call-apply-bind"><a href="#call-apply-bind" class="headerlink" title="call-apply-bind"></a>call-apply-bind</h3><p>1.call</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this-->func  context--> obj  args--> 传递过来的参数</span>  <span class="token comment">// 在context上加一个唯一值不影响context上的属性</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span>  <span class="token comment">// let args = [...arguments].slice(1)   //第一个参数为obj所以删除,伪数组转为数组</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 不删除会导致context属性越来越多</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.apply</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// this-->func  context--> obj  args--> 传递过来的参数</span>  <span class="token comment">// 在context上加一个唯一值不影响context上的属性</span>  <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>  context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment">// context为调用的上下文,this此处为函数，将这个函数作为context的方法</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token comment">// 这里和call传参不一样</span>  <span class="token keyword">delete</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token comment">// 不删除会导致context属性越来越多</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.bind</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">context <span class="token operator">=</span> window<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">this</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token constant">F</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">F</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">temp</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> args2<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    temp<span class="token punctuation">.</span><span class="token function">myCall</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"PENDING"</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">""</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"RESOLVED"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"REJECTED"</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">cb</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"PENDING"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>resolvedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onFulfilled<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>rejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>onRejected<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"RESOLVED"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token string">"REJECTED"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异步函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">time</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">timer</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> timer<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">ajax1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ajax2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">ajax3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">3</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function-variable function">all</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">promises</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> promises<span class="token punctuation">.</span>length    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 为什么不直接 promise[i].then, 因为promise[i]可能不是一个promise</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>promise<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data          index<span class="token operator">++</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token function">resolve</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>Promise<span class="token punctuation">.</span><span class="token function">all1</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">ajax1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ajax3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有顺序的执行-promose"><a href="#有顺序的执行-promose" class="headerlink" title="有顺序的执行 promose"></a>有顺序的执行 promose</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergePromise</span><span class="token punctuation">(</span><span class="token parameter">ajaxArr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">//存放返回结果</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  ajaxArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">ajax</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>      <span class="token keyword">return</span> data    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> promise<span class="token punctuation">&#125;</span><span class="token function">mergePromise</span><span class="token punctuation">(</span><span class="token punctuation">[</span>ajax1<span class="token punctuation">,</span> ajax2<span class="token punctuation">,</span> ajax3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="限制并发"><a href="#限制并发" class="headerlink" title="限制并发"></a><strong>限制并发</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">limitLoad</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> limit</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>url<span class="token punctuation">]</span>  <span class="token comment">//初始化promise容器</span>  <span class="token keyword">let</span> promises <span class="token operator">=</span> sequence<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> index    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> sequence    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">pCollect<span class="token punctuation">,</span> url</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> pCollect        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span> <span class="token comment">//返回已经完成的下标</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fastestIndex</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          promises<span class="token punctuation">[</span>fastestIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">handler</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> fastestIndex          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>promises<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模拟红绿的灯"><a href="#模拟红绿的灯" class="headerlink" title="模拟红绿的灯"></a><strong>模拟红绿的灯</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">await</span> <span class="token function">ajax1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">ajax2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">ajax3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">await</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>ajax3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a><strong>eventBus</strong></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">EventBus</span> <span class="token punctuation">&#123;</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_events <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">on</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      handler<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> fn <span class="token keyword">of</span> handler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">off</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> e <span class="token operator">===</span> fn<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      handler<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_events<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">once</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> _self <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>      _self<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 下面是 测试代码</span><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>params</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//测试用例</span><span class="token keyword">let</span> eb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test2<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test3<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token string">"第一次"</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> test1<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"event1"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"第二次1"</span><span class="token punctuation">,</span> <span class="token string">"第二次2"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">once</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> test4<span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> <span class="token string">"执行一次"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>eb<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"once"</span><span class="token punctuation">,</span> <span class="token number">134</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><h3 id="伪数组转换"><a href="#伪数组转换" class="headerlink" title="伪数组转换"></a><strong>伪数组转换</strong></h3><blockquote><p><strong>什么是伪数组</strong></p></blockquote><p>本身并不能调用数组方法，它是一个另外一种对象类型，只不过属性从 0 开始排，依次为 0，1，2…最后还<strong>有 callee 和 length 属性</strong>。我们也把这样的对象称为类数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arguments<span class="token punctuation">]</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(start,end)</span><span class="token keyword">let</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组扁平化"><a href="#数组扁平化" class="headerlink" title="数组扁平化"></a>数组扁平化</h3><ol><li>for 循环遍历判断是否数组 是的递归调用 <strong>concat 递归调用</strong>该数组 否则 push 新数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span class="token function">flatten</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>利用 reduce 方法 +concat</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法2</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">flatten</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">:</span> next<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>some+[…]</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法3</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>arr.toString().split(‘,’);</p></li><li><p>arr.flat([depth])</p></li><li><p>正则</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 方法 6</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">flatten</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">//[1,["2",[3,[4,5]]],6]</span>  str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\[|\])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>  str <span class="token operator">=</span> <span class="token string">"["</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"]"</span>  <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">flatten</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//  [1, 2, 3, 4，5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol></li></ol><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><ol><li><p><strong>JSON.parse</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>oldObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>局限性：</strong></p><ul><li><p>会忽略 undefined</p></li><li><p>不能序列化函数</p></li><li><p>不能解决循环引用的对象</p></li><li><p>他无法实现对函数 、RegExp 等特殊对象的克隆</p></li><li><p>会抛弃对象的 constructor,所有的构造函数会指向 Object</p></li><li><p>对象有循环引用,会报错</p></li></ul></li><li><p><strong>（递归）</strong></p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 如果是 值类型 或 null，则直接return</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">||</span> obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> obj  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> copy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    copy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历对象的key</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果key是对象的自有属性</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 递归调用深拷贝方法</span>      copy<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> copy<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li><p>new Set（）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><blockquote><p><strong>对象数组不能去重</strong></p></blockquote><ol start="2"><li><p><strong>indexOf</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> array<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>对象数组 NaN 不能去重</strong></p></blockquote></li><li><p>new Map()</p></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><strong>hasOwnProperty</strong></li></ol><p>简单版本</p><blockquote><p>只保留一个对象</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  object1  <span class="token keyword">typeof</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token operator">+</span><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span>  object<span class="token punctuation">[</span>object Object<span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item<span class="token operator">+</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>            obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item<span class="token operator">+</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>完整版本</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">unique</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"[object Object]"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// console.log(item);</span>      <span class="token comment">// console.log(JSON.stringify(item));</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>        obj<span class="token punctuation">[</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>      <span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>      <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"[object Object]"</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>      obj<span class="token punctuation">[</span><span class="token keyword">typeof</span> item <span class="token operator">+</span> item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h3><ol><li><p>冒泡</p><blockquote><p>每一轮操作，都会将这一轮中最大的元素放置到数组的末尾</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 外层循环用于控制从头到尾的比较+交换到底有多少轮</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 区别在这里，我们加了一个标志位</span>    <span class="token keyword">let</span> flag <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">// 内层循环用于完成每一轮遍历过程中的重复比较+交换</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若相邻元素前面的数比后面的大</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 交换两者</span>        <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>        flag <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若一次交换也没发生，则说明数组有序，直接放过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回数组</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>选择排序</strong></p><blockquote><p>每次都找出当前范围内的最小值，把它放在当前范围的头部</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 定义 minIndex，缓存当前区间最小值的索引，注意是索引</span>  <span class="token keyword">let</span> minIndex  <span class="token comment">// i 是当前排序区间的起点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化 minIndex 为当前区间第一个元素</span>    minIndex <span class="token operator">=</span> i    <span class="token comment">// i、j分别定义当前区间的上下界，i是左边界，j是右边界</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若 j 处的数据项比当前最小值还要小，则更新最小值索引为 j</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        minIndex <span class="token operator">=</span> j      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果 minIndex 对应元素不是目前的头部元素，则交换两者</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>minIndex <span class="token operator">!==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>插入排序</strong></p><blockquote><p>找到元素在它前面那个序列中的正确位置</p></blockquote></li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// temp 用来保存当前需要插入的元素</span>  <span class="token keyword">let</span> temp  <span class="token comment">// i用于标识每次被插入的元素的索引</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// j用于帮助 temp 寻找自己应该有的定位</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i    temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment">// 判断 j 前面一个元素是否比 temp 大</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果是，则将 j 前面的一个元素后移一位，为 temp 让出位置</span>      arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 循环让位，最后得到的 j 就是 temp 的正确索引</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><blockquote><p>归并排序是对分治思想的典型应用，它按照如下的思路对分治思想“三步走”的框架进行了填充：</p></blockquote><ul><li>分解子问题：将需要被排序的数组从中间分割为两半，然后再将分割出来的每个子数组各分割为两半，重复以上操作，直到单个子数组只有一个元素为止。</li><li>求解每个子问题：从粒度最小的子数组开始，两两合并、确保每次合并出来的数组都是有序的。（这里的“子问题”指的就是对每个子数组进行排序）。 合并子问题的解，得出大问题的解：当数组被合并至原有的规模时，就得到了一个完全排序的数组</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界情况</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token comment">// 计算分割点</span>  <span class="token keyword">const</span> mid <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>len <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割左子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> leftArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 递归分割右子数组，然后合并为有序数组</span>  <span class="token keyword">const</span> rightArr <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// 合并左右两个有序数组</span>  arr <span class="token operator">=</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span>leftArr<span class="token punctuation">,</span> rightArr<span class="token punctuation">)</span>  <span class="token comment">// 返回合并后的结果</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> arr  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> value <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> left<span class="token punctuation">,</span>    j <span class="token operator">=</span> right  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!==</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> value <span class="token operator">&amp;&amp;</span> j <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      j<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> value <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">;</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>  <span class="token keyword">return</span> arr<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="转化为驼峰命名"><a href="#转化为驼峰命名" class="headerlink" title="转化为驼峰命名"></a><strong>转化为驼峰命名</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">"get-element-by-id"</span><span class="token comment">// 转化为 getElementById</span><span class="token keyword">var</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">-\w</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断是否是回文串"><a href="#判断是否是回文串" class="headerlink" title="判断是否是回文串"></a>判断是否是回文串</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">str <span class="token operator">===</span><span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 缓存字符串的长度</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span>length    <span class="token comment">// 遍历前半部分，判断和后半部分是否对称</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!==</span>str<span class="token punctuation">[</span>len<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token comment">// 工具方法，用于判断字符串是否回文</span>    <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">st<span class="token punctuation">,</span> ed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token operator">&lt;</span>ed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>            st<span class="token operator">++</span>            ed<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除一个是否回文"><a href="#删除一个是否回文" class="headerlink" title="删除一个是否回文"></a>删除一个是否回文</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">validPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存字符串的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span>length  <span class="token comment">// i、j分别为左右指针</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 当左右指针均满足对称时，一起向中间前进</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i<span class="token operator">++</span>    j<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 尝试判断跳过左指针元素后字符串是否回文</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 尝试判断跳过右指针元素后字符串是否回文</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 工具方法，用于判断字符串是否回文</span>  <span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token parameter">st<span class="token punctuation">,</span> ed</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>st <span class="token operator">&lt;</span> ed<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span> <span class="token operator">!==</span> s<span class="token punctuation">[</span>ed<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>      <span class="token punctuation">&#125;</span>      st<span class="token operator">++</span>      ed<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 默认返回 false</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="无重复字符的最长子串"><a href="#无重复字符的最长子串" class="headerlink" title="无重复字符的最长子串"></a><strong>无重复字符的最长子串</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//判断滑动窗口内是否有重复元素</span>  <span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment">//滑动窗口左边界</span>    maxLength <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//极端情况</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//滑动窗口右边界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//当前元素不在set中 就加入set 然后更新最大长度，i++继续下一轮循环</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      maxLength <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxLength<span class="token punctuation">,</span> set<span class="token punctuation">.</span>size<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//set中有重复元素不断让j++ 并删除窗口之外的元素 直到滑动窗口内没有重复的元素</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        set<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        j<span class="token operator">++</span>      <span class="token punctuation">&#125;</span>      set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//放心将s[i]加入set中</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> maxLength<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长回文子串"><a href="#最长回文子串" class="headerlink" title="最长回文子串"></a><strong>最长回文子串</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">longestPalindrome</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> l <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 回文子串长度是奇数</span>    <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token comment">// 回文子串长度是偶数</span>    <span class="token function">helper</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">function</span> <span class="token function">helper</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>m <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      m<span class="token operator">--</span>      n<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 注意此处m,n的值循环完后  是恰好不满足循环条件的时刻 如果此轮询得到回文串长度大于之前记录， 记录此轮循边界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> r <span class="token operator">-</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      r <span class="token operator">=</span> n      l <span class="token operator">=</span> m    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长上升子序列模型"><a href="#最长上升子序列模型" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数字序列</span><span class="token keyword">const</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存序列的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化数组里面每一个索引位的状态值</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 初始化最大上升子序列的长度为1</span>  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 从第2个元素开始，遍历整个数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 及时更新上升子序列长度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLen <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span>  <span class="token keyword">return</span> maxLen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><blockquote><p>创建</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>注意</strong>：fill([])后面传递的是引用数据类型</p><h4 id="两数求和问题"><a href="#两数求和问题" class="headerlink" title="两数求和问题"></a><strong>两数求和问题</strong></h4><p>哈希表 map</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">twoSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> target</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里我用对象来模拟 map 的能力</span>  <span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断当前值对应的 target 差值是否存在（是否已遍历过）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若有对应差值，那么答案get！</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若没有对应差值，则记录当前值</span>    map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并升序数组"><a href="#合并升序数组" class="headerlink" title="合并升序数组"></a>合并升序数组</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums1<span class="token punctuation">,</span> m<span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针的指向，初始化 nums1 尾部索引k</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span>    k <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>  <span class="token comment">// 当两个数组都没遍历完时，指针同步移动</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 取较大的值，从末尾往前填补</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      i<span class="token operator">--</span>      k<span class="token operator">--</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      j<span class="token operator">--</span>      k<span class="token operator">--</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// nums2 留下的情况，特殊处理一下</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    nums1<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    k<span class="token operator">--</span>    j<span class="token operator">--</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeArr</span><span class="token punctuation">(</span><span class="token parameter">arr1<span class="token punctuation">,</span> arr2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个指针，分别指向 arr1 和 arr2</span>  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>    j <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 缓存arr1的长度</span>  <span class="token keyword">const</span> len1 <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length  <span class="token comment">// 缓存arr2的长度</span>  <span class="token keyword">const</span> len2 <span class="token operator">=</span> arr2<span class="token punctuation">.</span>length  <span class="token comment">// 合并两个子数组</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1 <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> len2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      i<span class="token operator">++</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      j<span class="token operator">++</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若其中一个子数组首先被合并完全，则直接拼接另一个子数组的剩余部分</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三数求和"><a href="#三数求和" class="headerlink" title="三数求和"></a>三数求和</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number[][]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">threeSum</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于存放结果数组</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 给 nums 排序</span>  nums <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token comment">// 缓存数组长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 注意我们遍历到倒数第三个数就足够了，因为左右指针会遍历后面两个数</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 左指针 j</span>    <span class="token keyword">let</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment">// 右指针k</span>    <span class="token keyword">let</span> k <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span>    <span class="token comment">// 如果遇到重复的数字，则跳过</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">continue</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 三数之和小于0，左指针前进</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        j<span class="token operator">++</span>        <span class="token comment">// 处理左指针元素重复的情况</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          j<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 三数之和大于0，右指针后退</span>        k<span class="token operator">--</span>        <span class="token comment">// 处理右指针元素重复的情况</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          k<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 得到目标数字组合，推入结果数组</span>        res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// 左右指针一起前进</span>        j<span class="token operator">++</span>        k<span class="token operator">--</span>        <span class="token comment">// 若左指针元素重复，跳过</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          j<span class="token operator">++</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 若右指针元素重复，跳过</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">===</span> nums<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          k<span class="token operator">--</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="比较版本号"><a href="#比较版本号" class="headerlink" title="比较版本号"></a>比较版本号</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">compareVersion</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">version1<span class="token punctuation">,</span> version2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> arr1 <span class="token operator">=</span> version1<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> arr2 <span class="token operator">=</span> version2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> n1 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> n2 <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>arr2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&lt;</span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr2 数组已经为空</span>    <span class="token keyword">return</span> arr1<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//if (temp2.length === 0) &#123;</span>  <span class="token comment">//    for (const value of temp1) &#123;</span>  <span class="token comment">//    if (Number(value) !== 0) return 1</span>  <span class="token comment">//   &#125;</span>  <span class="token comment">//&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// arr1 数组已经为空</span>    <span class="token keyword">return</span> arr2<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="千位分隔符"><a href="#千位分隔符" class="headerlink" title="千位分隔符"></a><strong>千位分隔符</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">thousandSeparator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> str <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\d&#123;1,3&#125;(?=(\d&#123;3&#125;)+$)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>s<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">thousandSeparator</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拆解-URL-参数中-queryString"><a href="#拆解-URL-参数中-queryString" class="headerlink" title="拆解 URL 参数中 queryString"></a><strong>拆解 URL 参数中 queryString</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">querySearch</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  query<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span>    res<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">"www.alipay.com/index.html?user=anyone&amp;tip=haha#first"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">querySearch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回最接近输入值的数字"><a href="#返回最接近输入值的数字" class="headerlink" title="返回最接近输入值的数字"></a><strong>返回最接近输入值的数字</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">findNext</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> tempArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>  tempArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  tempArr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">-</span> b  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> index <span class="token operator">=</span> tempArr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">===</span> tempArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> tempArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span>    tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> tempArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token operator">?</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token operator">:</span> tempArr<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="连续子数组的最大和"><a href="#连续子数组的最大和" class="headerlink" title="连续子数组的最大和"></a><strong>连续子数组的最大和</strong></h4><ol><li>贪心算法</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 继续加当前元素</span>      sum <span class="token operator">+=</span> num    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 加上当前元素只会对最终数组和起减少的作用，而不是增大数组和，所以就直接以当前元素为起点新起数组求最大数组和</span>      sum <span class="token operator">=</span> num    <span class="token punctuation">&#125;</span>    ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> ans<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>动态规划</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token keyword">let</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// base case 第一个元素前面没有子数组</span>  dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment">// 状态转移方程</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>      <span class="token comment">// 自成一派</span>      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment">// 与前面的子数组合并</span>      nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>dp<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;number[]&#125; nums * @return &#123;number&#125; */</span><span class="token keyword">var</span> <span class="token function-variable function">maxSubArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">//保存上一次的最大值</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> cur <span class="token comment">//保存结果</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cur <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> cur<span class="token punctuation">)</span>    res <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cur<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全排列"><a href="#全排列" class="headerlink" title="全排列"></a>全排列</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数组</span><span class="token keyword">const</span> <span class="token function-variable function">permute</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// curr 变量用来记录当前的排列内容</span>  <span class="token keyword">const</span> curr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// res 用来记录所有的排列顺序</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// visited 用来避免重复使用同一个数字</span>  <span class="token keyword">const</span> visited <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 定义 dfs 函数，入参是坑位的索引（从 0 计数）</span>  <span class="token keyword">function</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token parameter">nth</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若遍历到了不存在的坑位（第 len+1 个），则触碰递归边界返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nth <span class="token operator">===</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 此时前 len 个坑位已经填满，将对应的排列记录下来</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>curr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 检查手里剩下的数字有哪些</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若 nums[i] 之前没被其它坑位用过，则可以理解为“这个数字剩下了”</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 给 nums[i] 打个“已用过”的标</span>        visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>        <span class="token comment">// 将nums[i]推入当前排列</span>        curr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">// 基于这个排列继续往下一个坑走去</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">// nums[i]让出当前坑位</span>        curr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 下掉“已用过”标识</span>        visited<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 从索引为 0 的坑位（也就是第一个坑位）开始 dfs</span>  <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="如何用栈实现一个队列？"><a href="#如何用栈实现一个队列？" class="headerlink" title="如何用栈实现一个队列？"></a><strong>如何用栈实现一个队列？</strong></h4><ul><li><p>push(x) – 将一个元素放入队列的尾部。</p></li><li><p>pop() – 从队列首部移除元素。</p></li><li><p>peek() – 返回队列首部的元素。</p></li><li><p>empty() – 返回队列是否为空。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 初始化构造函数 */</span><span class="token keyword">const</span> <span class="token function-variable function">MyQueue</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化两个栈</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Push element x to the back of queue. * @param &#123;number&#125; x * @return &#123;void&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 直接调度数组的 push 方法</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Removes the element from in front of queue and returns that element. * @return &#123;number&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 假如 stack2 为空，需要将 stack1 的元素转移进来</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 stack1 不为空时，出栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将 stack1 出栈的元素推入 stack2</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 为了达到逆序的目的，我们只从 stack2 里出栈元素</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Get the front element. * @return &#123;number&#125; * 这个方法和 pop 唯一的区别就是没有将定位到的值出栈 */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当 stack1 不为空时，出栈</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将 stack1 出栈的元素推入 stack2</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存 stack2 的长度</span>  <span class="token keyword">const</span> stack2Len <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length  <span class="token keyword">return</span> stack2Len <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span>stack2Len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Returns whether the queue is empty. * @return &#123;boolean&#125; */</span><span class="token class-name">MyQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">empty</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若 stack1 和 stack2 均为空，那么队列空</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack1<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="找出所有滑动窗口里的最大值。"><a href="#找出所有滑动窗口里的最大值。" class="headerlink" title="找出所有滑动窗口里的最大值。"></a>找出所有滑动窗口里的最大值。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">maxSlidingWindow</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums<span class="token punctuation">,</span> k</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存数组的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 初始化结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 初始化双端队列</span>  <span class="token keyword">const</span> deque <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 开始遍历数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当队尾元素小于当前元素时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span>deque<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将队尾元素（索引）不断出队，直至队尾元素大于等于当前元素</span>      deque<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 入队当前元素索引（注意是索引）</span>    deque<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">// 当队头元素的索引已经被排除在滑动窗口之外时</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>deque<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> i <span class="token operator">-</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将队头元素索引出队</span>      deque<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断滑动窗口的状态，只有在被遍历的元素个数大于 k 的时候，才更新结果数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>deque<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><h4 id="栈的设计——“最小栈”问题"><a href="#栈的设计——“最小栈”问题" class="headerlink" title="栈的设计——“最小栈”问题"></a><strong>栈的设计——“最小栈”问题</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">MinStack</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 定义辅助栈</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @param &#123;number&#125; x * @return &#123;void&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 若入栈的值小于当前最小值，则推入辅助栈栈顶</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;void&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 若出栈的值和当前最小值相等，那么辅助栈也要对栈顶元素进行出栈，确保最小值的有效性</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;number&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">top</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token comment">/** * @return &#123;number&#125; */</span><span class="token class-name">MinStack</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getMin</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 辅助栈的栈顶，存的就是目标中的最小值</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>stack2<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有效括号"><a href="#有效括号" class="headerlink" title="有效括号"></a>有效括号</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"("</span><span class="token punctuation">,</span> <span class="token string">")"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"&#123;"</span><span class="token punctuation">,</span> <span class="token string">"&#125;"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token string">"("</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"["</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"&#123;"</span><span class="token operator">:</span>        arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        i<span class="token operator">++</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">")"</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"]"</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token string">"&#125;"</span><span class="token operator">:</span>        <span class="token comment">// arr.push()</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          i<span class="token operator">--</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><h4 id="链表的合并"><a href="#链表的合并" class="headerlink" title="链表的合并"></a><strong>链表的合并</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">mergeTwoLists</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">l1<span class="token punctuation">,</span> l2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义头结点，确保链表可以被访问到</span>  <span class="token keyword">let</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// cur 这里就是咱们那根“针”</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// “针”开始在 l1 和 l2 间穿梭了</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 l1 的结点值较小</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 先串起 l1 的结点</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1      <span class="token comment">// l1 指针向前一步</span>      l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// l2 较小时，串起 l2 结点</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l2      <span class="token comment">// l2 向前一步</span>      l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>    <span class="token comment">// “针”在串起一个结点后，也会往前一步</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 处理链表不等长的情况</span>  cur<span class="token punctuation">.</span>next <span class="token operator">=</span> l1 <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">?</span> l1 <span class="token operator">:</span> l2  <span class="token comment">// 返回起始结点</span>  <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链表结点的删除"><a href="#链表结点的删除" class="headerlink" title="链表结点的删除"></a><strong>链表结点的删除</strong></h4><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 设定 cur 指针，初始位置为链表第一个结点</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// 遍历链表</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 若当前结点和它后面一个结点值相等（重复）</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">===</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 删除靠后的那个结点（去重）</span>      cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若不重复，继续遍历</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中 没有重复出现的数字。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">deleteDuplicates</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 极端情况：0个或1个结点，则不会重复，直接返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> head  <span class="token punctuation">&#125;</span>  <span class="token comment">// dummy 登场</span>  <span class="token keyword">let</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy 永远指向头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// cur 从 dummy 开始遍历</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> dummy  <span class="token comment">// 当 cur 的后面有至少两个结点时</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 对 cur 后面的两个结点进行比较</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若值重复，则记下这个值</span>      <span class="token keyword">let</span> val <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val      <span class="token comment">// 反复地排查后面的元素是否存在多次重复该值的情况</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val <span class="token operator">===</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 若有，则删除</span>        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若不重复，则正常遍历</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回链表的起始结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除链表的倒数第-N-个结点"><a href="#删除链表的倒数第-N-个结点" class="headerlink" title="删除链表的倒数第 N 个结点"></a><strong>删除链表的倒数第 N 个结点</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">removeNthFromEnd</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化 dummy 结点</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy指向头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// 初始化快慢指针，均指向dummy</span>  <span class="token keyword">let</span> fast <span class="token operator">=</span> dummy  <span class="token keyword">let</span> slow <span class="token operator">=</span> dummy  <span class="token comment">// 快指针闷头走 n 步</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    n<span class="token operator">--</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 快慢指针一起走</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next    slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 慢指针删除自己的后继结点</span>  slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next  <span class="token comment">// 返回头结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="链表的反转"><a href="#链表的反转" class="headerlink" title="链表的反转"></a><strong>链表的反转</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverseList</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 初始化前驱结点为 null</span>  <span class="token keyword">let</span> pre <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment">// 初始化目标结点为头结点</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> head  <span class="token comment">// 只要目标结点不为 null，遍历就得继续</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 记录一下 next 结点</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    <span class="token comment">// 反转指针</span>    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre    <span class="token comment">// pre 往前走一步</span>    pre <span class="token operator">=</span> cur    <span class="token comment">// cur往前走一步</span>    cur <span class="token operator">=</span> next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 反转结束后，pre 就会变成新链表的头结点</span>  <span class="token keyword">return</span> pre<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局部反转一个链表"><a href="#局部反转一个链表" class="headerlink" title="局部反转一个链表"></a>局部反转一个链表</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">reverseBetween</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义pre、cur，用leftHead来承接整个区间的前驱结点</span>  <span class="token keyword">let</span> pre<span class="token punctuation">,</span> cur<span class="token punctuation">,</span> leftHead  <span class="token comment">// 别忘了用 dummy 嗷</span>  <span class="token keyword">const</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// dummy后继结点是头结点</span>  dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head  <span class="token comment">// p是一个游标，用于遍历，最初指向 dummy</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> dummy  <span class="token comment">// p往前走 m-1 步，走到整个区间的前驱结点处</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> p<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token comment">// 缓存这个前驱结点到 leftHead 里</span>  leftHead <span class="token operator">=</span> p  <span class="token comment">// start 是反转区间的第一个结点</span>  <span class="token keyword">let</span> start <span class="token operator">=</span> leftHead<span class="token punctuation">.</span>next  <span class="token comment">// pre 指向start</span>  pre <span class="token operator">=</span> start  <span class="token comment">// cur 指向 start 的下一个结点</span>  cur <span class="token operator">=</span> pre<span class="token punctuation">.</span>next  <span class="token comment">// 开始重复反转动作</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> pre    pre <span class="token operator">=</span> cur    cur <span class="token operator">=</span> next  <span class="token punctuation">&#125;</span>  <span class="token comment">//  leftHead 的后继结点此时为反转后的区间的第一个结点</span>  leftHead<span class="token punctuation">.</span>next <span class="token operator">=</span> pre  <span class="token comment">// 将区间内反转后的最后一个结点 next 指向 cur</span>  start<span class="token punctuation">.</span>next <span class="token operator">=</span> cur  <span class="token comment">// dummy.next 永远指向链表头结点</span>  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="判断链表是否成环"><a href="#判断链表是否成环" class="headerlink" title="判断链表是否成环"></a><strong>判断链表是否成环</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">hasCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 只要结点存在，那么就继续遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果 flag 已经立过了，那么说明环存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 如果 flag 没立过，就立一个 flag 再往 下走</span>      head<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定位环的起点"><a href="#定位环的起点" class="headerlink" title="定位环的起点"></a><strong>定位环的起点</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">detectCycle</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">head</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> head    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      head<span class="token punctuation">.</span>flag <span class="token operator">=</span> <span class="token boolean">true</span>      head <span class="token operator">=</span> head<span class="token punctuation">.</span>next    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h4><ol><li>哈希表</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">const</span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">let</span> pA <span class="token operator">=</span> headA  <span class="token keyword">while</span> <span class="token punctuation">(</span>pA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hashmap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pA<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    pA <span class="token operator">=</span> pA<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> pB <span class="token operator">=</span> headB  <span class="token keyword">while</span> <span class="token punctuation">(</span>pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hashmap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>pB<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> pB    pB <span class="token operator">=</span> pB<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>双指针</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">getIntersectionNode</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">headA<span class="token punctuation">,</span> headB</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>headA <span class="token operator">||</span> <span class="token operator">!</span>headB<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">let</span> pA <span class="token operator">=</span> headA<span class="token punctuation">,</span>    pB <span class="token operator">=</span> headB  <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!==</span> pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pA <span class="token operator">=</span> pA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pA<span class="token punctuation">.</span>next    pB <span class="token operator">=</span> pB <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pB<span class="token punctuation">.</span>next  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> pA<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 首先声明一个数组用来存放遍历得到的节点val值</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 采用递归遍历</span>  <span class="token keyword">function</span> <span class="token function">preorder</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果节点为空直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token comment">// 先序遍历就是把当前节点输出 放在左右递归调用之前 将其数值放入结果数组</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 然后递归遍历左孩子</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token comment">// 最后递归遍历右孩子</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 返回结果</span>  <span class="token keyword">return</span> result<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代遍历（利用栈思想）"><a href="#迭代遍历（利用栈思想）" class="headerlink" title="迭代遍历（利用栈思想）"></a>迭代遍历（利用栈思想）</h4><ol><li><p>前序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number[]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">preorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 首先将根结点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 若栈不为空，则重复出栈、入栈操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将栈顶结点记为当前结点</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的尾部</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>后序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * @param &#123;TreeNode&#125; root * @return &#123;number[]&#125; */</span><span class="token keyword">const</span> <span class="token function-variable function">postorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 首先将根结点入栈</span>  stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 若栈不为空，则重复出栈、入栈操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将栈顶结点记为当前结点</span>    <span class="token keyword">const</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 当前结点就是当前子树的根结点，把这个结点放在结果数组的头部</span>    res<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 若当前子树根结点有左孩子，则将左孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 若当前子树根结点有右孩子，则将右孩子入栈</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>中序</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">inorderTraversal</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 定义结果数组</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 初始化栈结构</span>  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 用一个 cur 结点充当游标</span>  <span class="token keyword">let</span> cur <span class="token operator">=</span> root  <span class="token comment">// 当 cur 不为空、或者 stack 不为空时，重复以下逻辑</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">||</span> stack<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这个 while 的作用是把寻找最左叶子结点的过程中，途径的所有结点都记录下来</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 将途径的结点入栈</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span>      <span class="token comment">// 继续搜索当前结点的左孩子</span>      cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取出栈顶元素</span>    cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 将栈顶元素入栈</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 尝试读取 cur 结点的右孩子</span>    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right  <span class="token punctuation">&#125;</span>  <span class="token comment">// 返回结果数组</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><ol><li>返回数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token constant">BFS</span><span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 初始化队列queue</span>  <span class="token comment">// 根结点首先入队</span>  queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span>  <span class="token comment">// 队列不为空，说明没有遍历完全</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> top <span class="token operator">=</span> queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// 取出队头元素</span>    <span class="token comment">// 访问 top</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>val<span class="token punctuation">)</span>    <span class="token comment">// 如果左子树存在，左子树入队</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>left<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果右子树存在，右子树入队</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 访问完毕，队头元素出队</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>返回二维数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">levelOrder</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* 非递归的实现方式 */</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res  <span class="token keyword">let</span> queue <span class="token operator">=</span> <span class="token punctuation">[</span>root<span class="token punctuation">]</span>  <span class="token comment">// while 循环控制从上向下一层层遍历</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span>length    <span class="token comment">// 记录这一层的节点值</span>    <span class="token keyword">let</span> level <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">// for 循环控制每一层从左向右遍历</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> cur <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      level<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>right<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><h4 id="爬楼梯"><a href="#爬楼梯" class="headerlink" title="爬楼梯"></a><strong>爬楼梯</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理递归边界</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 递归计算</span>    <span class="token keyword">return</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token comment">// 定义记忆数组 f</span><span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">2</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若f[n]不存在，则进行计算</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">===</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  f<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment">// 若f[n]已经求解过，直接返回</span>  <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>  <span class="token keyword">const</span> <span class="token function-variable function">climbStairs</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化状态数组</span>    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化已知值</span>    f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 动态更新每一层楼梯对应的结果</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> f<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 返回目标值</span>    <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="如何优雅地找硬币"><a href="#如何优雅地找硬币" class="headerlink" title="如何优雅地找硬币"></a><strong>如何优雅地找硬币</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">coinChange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">coins<span class="token punctuation">,</span> amount</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 用于保存每个目标总额对应的最小硬币个数</span>  <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// 提前定义已知情况</span>  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">// 遍历 [1, amount] 这个区间的硬币总额</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 求的是最小值，因此我们预设为无穷大，确保它一定会被更小的数更新</span>    f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">Infinity</span>    <span class="token comment">// 循环遍历每个可用硬币的面额</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若硬币面额小于目标总额，则问题成立</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 状态转移方程</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> coins<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若目标总额对应的解为无穷大，则意味着没有一个符合条件的硬币总数来更新它，本题无解，返回-1</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 若有解，直接返回解的内容</span>  <span class="token keyword">return</span> f<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="背包模型"><a href="#背包模型" class="headerlink" title="背包模型"></a>背包模型</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">knapsack</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> c<span class="token punctuation">,</span> w<span class="token punctuation">,</span> value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// dp是动态规划的状态保存数组</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment">// res 用来记录所有组合方案中的最大值</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token operator">=</span> c<span class="token punctuation">;</span> v <span class="token operator">>=</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> v<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 写出状态转移方程</span>      dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>v <span class="token operator">-</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">// 即时更新最大值</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span> <span class="token operator">></span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> dp<span class="token punctuation">[</span>v<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> res<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最长上升子序列模型-1"><a href="#最长上升子序列模型-1" class="headerlink" title="最长上升子序列模型"></a><strong>最长上升子序列模型</strong></h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 入参是一个数字序列</span><span class="token keyword">const</span> <span class="token function-variable function">lengthOfLIS</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 缓存序列的长度</span>  <span class="token keyword">const</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length  <span class="token comment">// 处理边界条件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 初始化数组里面每一个索引位的状态值</span>  <span class="token keyword">const</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment">// 初始化最大上升子序列的长度为1</span>  <span class="token keyword">let</span> maxLen <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment">// 从第2个元素开始，遍历整个数组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 每遍历一个新元素，都要“回头看”，看看能不能延长原有的上升子序列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 若遇到了一个比当前元素小的值，则意味着遇到了一个可以延长的上升子序列，故更新当前元素索引位对应的状态</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 及时更新上升子序列长度的最大值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> maxLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      maxLen <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 遍历完毕，最后到手的就是最大上升子序列的长度</span>  <span class="token keyword">return</span> maxLen<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="实现-add-1-2"><a href="#实现-add-1-2" class="headerlink" title="实现 add(1)(2)()"></a>实现 add(1)(2)()</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a    <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20220330143049151](/Users/didi/Library/Application Support/typora-user-images/image-20220330143049151.png)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
